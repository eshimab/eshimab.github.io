{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. about.md # The about file shellnotes.md # Or \"How to use git\" vsnotes.md # Tips for VS Code Ok","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. about.md # The about file shellnotes.md # Or \"How to use git\" vsnotes.md # Tips for VS Code","title":"Project layout"},{"location":"#ok","text":"","title":"Ok"},{"location":"about/","text":"Starting directory structure. # Define the core directory dircore=\"/Users/eshim/scidev\" direnvs=\"${dircore}/envsdir\" dirmdoc=\"${direnvs}/mdocs\" dirasst=\"${dircore}/assets\" dirpckg=\"${dirasst}/packges\" filecore=\"corefile.md\" # Make Dirs mkdir -p \"$direnvs\" mkdir -p \"$dirmdoc\" mkdir -p \"$dirasst\" mkdir -p \"$dirpckg\" Tips: 1. When doing the BASH variable assignment, the = symbol should not have spaces on either side. 2. (CB) In this code, the directories direnvs and dirmdoc are created using the mkdir command with the -p option. The -p option ensures that parent directories are created if they don't already exist. The variable values are correctly concatenated using the ${variable} syntax. 3. Pick up the command line tool tree to visualize the directory structure: bash # Get the program homebrew /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" # Use homebrew to install tree brew install tree Create a python3 virtual environment ( venv ) to run Mkdocs # Create the python3 venv python3 -m venv \"${dirmdoc}\" # Activate the venv source \"${dirmdoc}/bin/activate\" # Go there cd ${dircore} Tips: 1. Notice that the variable is wrapped in \"\" because the command input should be a string 2. CB: By using the -m (there is no long-form version) flag followed by the module name (venv), you are instructing the Python interpreter to execute the venv module's script functionality. This allows you to create a virtual environment using the python3 -m venv command, without explicitly running a separate Python script or invoking a specific Python file. Now we are working in the python3 environment where lines should be preceded by (mdocs) hostname:scidev username$ # Upgrade pip so that it doesn't complain python3 -m pip install --upgrade pip # install the local Mkdocs package, version 1.4.3 python3 -m pip install \"/Users/eshim/scidev/assets/packages/mkdocs-1.4.3.tar.gz\" Then create the MkDocs project directory in the python3 venv mkdocs new \"/Users/eshim/scidev/notesite\" cd /Users/eshim/scidev/notesite mkdocs serve And you get output: INFO - Building documentation... INFO - Cleaning site directory INFO - Documentation built in 0.06 seconds INFO - [10:50:41] Watching paths for changes: 'docs', 'mkdocs.yml' INFO - [10:50:41] Serving on http://127.0.0.1:8000/ It will serve on Your local Macine Now leave this Terminal instance running and let it update the site in the background. I will call this the Mkdocs Server Terminal or similarly. Open a new terminal window Get an example page from Mkdocs and send it to the Mkdocs website directory notesite curl 'https://jaspervdj.be/lorem-markdownum/markdown.txt' > /Users/eshim/scidev/notesite/docs/about.md In the Mkdocs Server Terminal you will see an update as it adds the new webpage: INFO - [11:36:50] Detected file changes INFO - Building documentation... INFO - Documentation built in 0.07 seconds INFO - [11:36:50] Reloading browsers INFO - [11:36:50] Browser connected: http://127.0.0.1:8000/ Edit the mkdocs.yml file in ~/scidev/notesite site_name: Super Fun Digressions # site_name and site_url are the only required fields site_url: https://example.com # https://example.com is a placeholder value nav: - Home: index.md - About: about.md Creating a shell script for displaying file trees Open a terminal window. Open your shell's configuration file using a text editor. For example: bash nano ~/.bashrc Ok Ok","title":"About"},{"location":"about/#starting-directory-structure","text":"# Define the core directory dircore=\"/Users/eshim/scidev\" direnvs=\"${dircore}/envsdir\" dirmdoc=\"${direnvs}/mdocs\" dirasst=\"${dircore}/assets\" dirpckg=\"${dirasst}/packges\" filecore=\"corefile.md\" # Make Dirs mkdir -p \"$direnvs\" mkdir -p \"$dirmdoc\" mkdir -p \"$dirasst\" mkdir -p \"$dirpckg\" Tips: 1. When doing the BASH variable assignment, the = symbol should not have spaces on either side. 2. (CB) In this code, the directories direnvs and dirmdoc are created using the mkdir command with the -p option. The -p option ensures that parent directories are created if they don't already exist. The variable values are correctly concatenated using the ${variable} syntax. 3. Pick up the command line tool tree to visualize the directory structure: bash # Get the program homebrew /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" # Use homebrew to install tree brew install tree","title":"Starting directory structure."},{"location":"about/#create-a-python3-virtual-environment-venv-to-run-mkdocs","text":"# Create the python3 venv python3 -m venv \"${dirmdoc}\" # Activate the venv source \"${dirmdoc}/bin/activate\" # Go there cd ${dircore} Tips: 1. Notice that the variable is wrapped in \"\" because the command input should be a string 2. CB: By using the -m (there is no long-form version) flag followed by the module name (venv), you are instructing the Python interpreter to execute the venv module's script functionality. This allows you to create a virtual environment using the python3 -m venv command, without explicitly running a separate Python script or invoking a specific Python file. Now we are working in the python3 environment where lines should be preceded by (mdocs) hostname:scidev username$ # Upgrade pip so that it doesn't complain python3 -m pip install --upgrade pip # install the local Mkdocs package, version 1.4.3 python3 -m pip install \"/Users/eshim/scidev/assets/packages/mkdocs-1.4.3.tar.gz\" Then create the MkDocs project directory in the python3 venv mkdocs new \"/Users/eshim/scidev/notesite\" cd /Users/eshim/scidev/notesite mkdocs serve And you get output: INFO - Building documentation... INFO - Cleaning site directory INFO - Documentation built in 0.06 seconds INFO - [10:50:41] Watching paths for changes: 'docs', 'mkdocs.yml' INFO - [10:50:41] Serving on http://127.0.0.1:8000/ It will serve on Your local Macine Now leave this Terminal instance running and let it update the site in the background. I will call this the Mkdocs Server Terminal or similarly. Open a new terminal window Get an example page from Mkdocs and send it to the Mkdocs website directory notesite curl 'https://jaspervdj.be/lorem-markdownum/markdown.txt' > /Users/eshim/scidev/notesite/docs/about.md In the Mkdocs Server Terminal you will see an update as it adds the new webpage: INFO - [11:36:50] Detected file changes INFO - Building documentation... INFO - Documentation built in 0.07 seconds INFO - [11:36:50] Reloading browsers INFO - [11:36:50] Browser connected: http://127.0.0.1:8000/ Edit the mkdocs.yml file in ~/scidev/notesite site_name: Super Fun Digressions # site_name and site_url are the only required fields site_url: https://example.com # https://example.com is a placeholder value nav: - Home: index.md - About: about.md","title":"Create a python3 virtual environment (venv) to run Mkdocs"},{"location":"about/#creating-a-shell-script-for-displaying-file-trees","text":"Open a terminal window. Open your shell's configuration file using a text editor. For example: bash nano ~/.bashrc Ok Ok","title":"Creating a shell script for displaying file trees"},{"location":"shellnotes/","text":"Terminal Use ls -a to see hidden folder and files that start with . # Short-form ls -a # Combine with -l ls -al Yes, the long form of the -a option in the ls command is --all. Both -a and --all have the same functionality of showing all files, including hidden ones. Need to add code nano ~/.bash_profile Git Working with active git repositories Comitting a new local directory to the GitHub Repository Git Repo Info Github Repository: https://github.com/eshimab/scidev Branches main GitHub Website Before Commit Local Git Branch main GitHub Local Directory Before Commit See that the assets dir is located in the local scidev dhcp-168-105-223-225:scidev eshim$ ls -la total 56 drwxr-xr-x 11 eshim staff 352 Jul 10 13:11 . drwxr-xr-x@ 94 eshim staff 3008 Jul 10 13:11 .. -rw-r--r--@ 1 eshim staff 10244 Jul 10 13:49 .DS_Store drwxr-xr-x 17 eshim staff 544 Jul 10 13:51 .git -rw-r--r-- 1 eshim staff 315 Jul 6 23:57 .gitignore -rw-r--r-- 1 eshim staff 1062 Jul 10 12:14 LICENSE -rw-r--r-- 1 eshim staff 54 Jul 10 12:14 README.md drwxr-xr-x 5 eshim staff 160 Jul 6 16:31 assets -rw-r--r-- 1 eshim staff 3713 Jul 10 13:11 corefile.md drwxr-xr-x 4 eshim staff 128 Jul 5 17:33 envsdir drwxr-xr-x 6 eshim staff 192 Jul 10 13:15 notesite dhcp-168-105-223-225:scidev eshim$ git add local dirs and files to prepare for the commit We want to git add the directory scidev/assets/files/ to our next git commit . Notes - The -r or --recursive flag is not necessary since Git automatically traverses directories recursively when adding files. Starting in ~/scidev directory git add assets/files git add envsdir/mdocs/bin Check git status git status See Output: Git Status After Adding assets/files and envsdir/mdocs/bin Example Repeat : add scidev/notesite/img/* (start in ~/scidev ) cd ~/scidev git add notesite/img Git Status After Adding notesite/img/* Git Commit vs Push In Git, a commit and a push are two separate operations that serve different purposes: Git Commit: Purpose: Creating a new commit to save your changes locally within your Git repository. Usage: The git commit command is used to record your changes and create a new commit in your local repository. It captures the current state of your files, including any modifications, additions, or deletions. Each commit has a unique identifier and contains information such as the author, timestamp, and commit message describing the changes. Local Operation: When you run git commit , the commit is created only within your local Git repository on your machine. It does not affect the remote repository or other collaborators' copies of the repository. Git Push: Purpose: Sending your local commits to a remote repository, typically hosted on a platform like GitHub, GitLab, or Bitbucket. Usage: The git push command is used to upload your local commits to a remote repository. It transfers your committed changes from your local repository to the corresponding branch in the remote repository. This allows you to share your changes with others, collaborate on the project, and synchronize your work with the remote repository. Remote Operation: When you run git push , Git sends your committed changes to the remote repository, updating the branch's commit history and files on the remote server. Other collaborators can then fetch or pull your changes into their own local repositories to incorporate your work. In summary, a commit is a local operation that saves your changes within your local repository, while a push is used to send your local commits to a remote repository to share and synchronize your changes with others. Commits are made locally, and pushes are performed to update the remote repository with your local commits. Create a local git commit to incorporate the changes done with git add or changes to files directly in scidev because we have been editting the branch scidev/main Commit the directory changes and add a Commit Message using the -m flag git commit -m \"Added directories scidev/bin scidev/assets/files scidev/notesite/img\" See Output: Git Commit Command Output But we still have changes on files that were not added. This message was shown in git status Untracked Files in Git Status So we need to add these files with git add # Go to main branch directory cd ~/scidev git add .gitignore git add notesite git add mdocs/pyvenv.cfg See git status output New Git Status Now do another commit to github.io/eshimab/scidev/main git commit -m \"Updated notesite, added envsdir/mdoc/pyenvs.cfg, updated .gitignore\" See Output Final Commit Example Managing GitHub Repository Url Aliases with git remote We can check that the repository url is correct by using the git remote command with the get-url flag for the GitHub repository that we refer to with the local alias origin . You can think of origin as a short-hand for the repository url. The origin alis is created using the git remote command with the add option to define a local repository URL alias we will call scimain from the GitHub Repository git remote add scimain https://github.com/eshimab/scidev List the available Repository URL Aliases using git remote without any additional arguments - Use the --verbose or -v flag to show additional info git remote --verbose Output: Git Remote Repository Aliases Now we can remove the old alias origin because it points to the same GitHub Repository URL as the new created alias scimain - Deleting the origin alias will not affect your connection to the remote repository as long as you have another valid remote alias configured. git remote remove origin ## Check for changes git remote --verbose Output: After Deleting the old `origin` repository url alias Pushing Files with git push git push the local git commit to the GitHub repo/branch scidev/main Use the GitHub Repository URL alias scimain that points to the full URL https://github.com/eshimab/scidev (check this with git remote --verbose ) Push the commits done on the local branch main with git push to the GitHub Repository scimain (the alias for http://github.com/eshimab/scidev ) git push scimain main See output for checking the git remote alias name with the --verbose flag, then running the git push command, sending commits in the local branch main to the repository linked in the alias scimain . Local Command Output After git push And the GitHub webpage for scidev/main has been updated via the local machine push Github Webpage Updated Summarizing Git Add/Commit/Push to Repository Stage files with git add bash git add * Preview if desired with git status Commit Staged files with git commit Add a commit message with -m \"message text\" bash git commit -m \"updates to notesite\" Push the commit (containing the staged files) to the remote directory using git remote <local-remote-alias> <local-branch-name> bash git push scimain main You can list the local <local-remote-alias> avilable using git remote --verbose bash dhcp-168-105-223-225:scidev eshim$ git remote --verbose scimain https://github.com/eshimab/scidev (fetch) scimain https://github.com/eshimab/scidev (push) For this example, the <local-remote-alias> is scimain and points to https://github.io/eshimab/scidev For this example, the <local-branch-name> is main and is recorded in the Github repo as scidev/main See that we are on branch main using git status ```bash dhcp-168-105-223-225:scidev eshim$ git status On branch main Changes not staged for commit: (use \"git add ...\" to update what will be committed) (use \"git checkout -- ...\" to discard changes in working directory) modified: notesite/docs/shellnotes.md no changes added to commit (use \"git add\" and/or \"git commit -a\") dhcp-168-105-223-225:scidev eshim$ 4. See Output from `git push scimain main` bash dhcp-168-105-223-225:scidev eshim$ git push scimain main Enumerating objects: 15, done. Counting objects: 100% (15/15), done. Delta compression using up to 10 threads Compressing objects: 100% (10/10), done. Writing objects: 100% (10/10), 237.52 KiB | 33.93 MiB/s, done. Total 10 (delta 4), reused 0 (delta 0) remote: Resolving deltas: 100% (4/4), completed with 4 local objects. To https://github.com/eshimab/scidev eb213eb..4d8a21e main -> main dhcp-168-105-223-225:scidev eshim$ ``` More standard git setups Adding git hooks cd ~/scidev git add .git/hooks/pre-commit git add .git/hooks/post-commit --- Adding and updating files and directories to an established git repo Initializing a git repo using a local directory (with a generic, empty repo already on GitHub) To use your local \"scidev\" folder to update your GitHub repository named \"scidev\" while creating a .gitignore file and a pre-commit Git hook to limit staging to files below 1MB, follow these steps: [ ] Create the .gitignore file: [ ] Open a text editor and create a file named \".gitignore\" in the root directory of your \"scidev\" folder. [ ] Add the necessary patterns to ignore files in the .gitignore file. For example, you can add *.pdf to ignore all PDF files. bash # Ignore directories withim scidev: # The leading / means that these are subdirectories within scidev where the .gitignore file is found # The trailing / means that we are targetting a directory and all it's contents /assets/packages/ /envsdir/mdocs/bin/ /envsdir/mdocs/lib/ # # Ignore Filetypes *.pdf *.mat [ ] Create the pre-commit Git hook: [ ] Open a text editor and create a file named \"pre-commit\" (without an extension) in the \".git/hooks\" directory of your \"scidev\" repository. bash touch /Users/eshim/scidev/.git/hooks/pre-commit [ ] Copy and paste the following script into the \"pre-commit\" file: ```bash #!/bin/bash MAX_FILE_SIZE=1048576 # 1MB in bytes # Get the list of staged files files=$(git diff --cached --name-only) # Loop through the staged files for file in $files; do # Get the file size in bytes file_size=$(wc -c < \"$file\") # Compare file size with the maximum size if [ \"$file_size\" -gt \"$MAX_FILE_SIZE\" ]; then # Remove the file from the staging area git reset HEAD \"$file\" echo \"File $file exceeds the maximum file size limit. It has been excluded from the commit.\" fi done # exit 0 - [ ] Save the file and make it executable by running the following command in the terminal: bash chmod +x /Users/eshim/scidev/.git/hooks/pre-commit - [ ] Initialize Git and connect to your GitHub repository: - [ ] Open a terminal or command prompt and navigate to your \"scidev\" folder. bash cd /Users/eshim/scidev - [ ] Run the following commands: bash git init git remote add origin https://github.com/eshimab/scidev - [ ] Replace `<repository-url>` with the URL of your GitHub repository. - [ ] Add and commit files: - [ ] Add the files you want to include in the commit using `git add`. - [ ] Commit the changes using `git commit -m \"Initial commit\"`. bash git add notesite/ git commit -m \"Initial Commit for directory notesite/ \" ``` With these steps, your local \"scidev\" folder will be updated with the .gitignore file and the pre-commit Git hook. The pre-commit hook will exclude files above 1MB from being staged in your commits. Remember to customize the MAX_FILE_SIZE variable in the pre-commit script if you want a different maximum file size limit.","title":"Github Setup"},{"location":"shellnotes/#terminal","text":"","title":"Terminal"},{"location":"shellnotes/#use-ls-a-to-see-hidden-folder-and-files-that-start-with","text":"# Short-form ls -a # Combine with -l ls -al Yes, the long form of the -a option in the ls command is --all. Both -a and --all have the same functionality of showing all files, including hidden ones. Need to add code nano ~/.bash_profile","title":"Use ls -a to see hidden folder and files that start with ."},{"location":"shellnotes/#git","text":"","title":"Git"},{"location":"shellnotes/#working-with-active-git-repositories","text":"","title":"Working with active git repositories"},{"location":"shellnotes/#comitting-a-new-local-directory-to-the-github-repository","text":"","title":"Comitting a new local directory to the GitHub Repository"},{"location":"shellnotes/#git-repo-info","text":"Github Repository: https://github.com/eshimab/scidev Branches main GitHub Website Before Commit","title":"Git Repo Info"},{"location":"shellnotes/#local-git-branch-main","text":"GitHub Local Directory Before Commit See that the assets dir is located in the local scidev dhcp-168-105-223-225:scidev eshim$ ls -la total 56 drwxr-xr-x 11 eshim staff 352 Jul 10 13:11 . drwxr-xr-x@ 94 eshim staff 3008 Jul 10 13:11 .. -rw-r--r--@ 1 eshim staff 10244 Jul 10 13:49 .DS_Store drwxr-xr-x 17 eshim staff 544 Jul 10 13:51 .git -rw-r--r-- 1 eshim staff 315 Jul 6 23:57 .gitignore -rw-r--r-- 1 eshim staff 1062 Jul 10 12:14 LICENSE -rw-r--r-- 1 eshim staff 54 Jul 10 12:14 README.md drwxr-xr-x 5 eshim staff 160 Jul 6 16:31 assets -rw-r--r-- 1 eshim staff 3713 Jul 10 13:11 corefile.md drwxr-xr-x 4 eshim staff 128 Jul 5 17:33 envsdir drwxr-xr-x 6 eshim staff 192 Jul 10 13:15 notesite dhcp-168-105-223-225:scidev eshim$","title":"Local Git Branch main"},{"location":"shellnotes/#git-add-local-dirs-and-files-to-prepare-for-the-commit","text":"We want to git add the directory scidev/assets/files/ to our next git commit . Notes - The -r or --recursive flag is not necessary since Git automatically traverses directories recursively when adding files. Starting in ~/scidev directory git add assets/files git add envsdir/mdocs/bin Check git status git status See Output: Git Status After Adding assets/files and envsdir/mdocs/bin Example Repeat : add scidev/notesite/img/* (start in ~/scidev ) cd ~/scidev git add notesite/img Git Status After Adding notesite/img/*","title":"git add local dirs and files to prepare for the commit"},{"location":"shellnotes/#git-commit-vs-push","text":"In Git, a commit and a push are two separate operations that serve different purposes: Git Commit: Purpose: Creating a new commit to save your changes locally within your Git repository. Usage: The git commit command is used to record your changes and create a new commit in your local repository. It captures the current state of your files, including any modifications, additions, or deletions. Each commit has a unique identifier and contains information such as the author, timestamp, and commit message describing the changes. Local Operation: When you run git commit , the commit is created only within your local Git repository on your machine. It does not affect the remote repository or other collaborators' copies of the repository. Git Push: Purpose: Sending your local commits to a remote repository, typically hosted on a platform like GitHub, GitLab, or Bitbucket. Usage: The git push command is used to upload your local commits to a remote repository. It transfers your committed changes from your local repository to the corresponding branch in the remote repository. This allows you to share your changes with others, collaborate on the project, and synchronize your work with the remote repository. Remote Operation: When you run git push , Git sends your committed changes to the remote repository, updating the branch's commit history and files on the remote server. Other collaborators can then fetch or pull your changes into their own local repositories to incorporate your work. In summary, a commit is a local operation that saves your changes within your local repository, while a push is used to send your local commits to a remote repository to share and synchronize your changes with others. Commits are made locally, and pushes are performed to update the remote repository with your local commits.","title":"Git Commit vs Push"},{"location":"shellnotes/#create-a-local-git-commit-to-incorporate-the-changes-done-with-git-add-or-changes-to-files-directly-in-scidev-because-we-have-been-editting-the-branch-scidevmain","text":"Commit the directory changes and add a Commit Message using the -m flag git commit -m \"Added directories scidev/bin scidev/assets/files scidev/notesite/img\" See Output: Git Commit Command Output But we still have changes on files that were not added. This message was shown in git status Untracked Files in Git Status So we need to add these files with git add # Go to main branch directory cd ~/scidev git add .gitignore git add notesite git add mdocs/pyvenv.cfg See git status output New Git Status Now do another commit to github.io/eshimab/scidev/main git commit -m \"Updated notesite, added envsdir/mdoc/pyenvs.cfg, updated .gitignore\" See Output Final Commit Example","title":"Create a local git commit to incorporate the changes done with git add or changes to files directly in scidev because we have been editting the branch scidev/main"},{"location":"shellnotes/#managing-github-repository-url-aliases-with-git-remote","text":"We can check that the repository url is correct by using the git remote command with the get-url flag for the GitHub repository that we refer to with the local alias origin . You can think of origin as a short-hand for the repository url. The origin alis is created using the git remote command with the add option to define a local repository URL alias we will call scimain from the GitHub Repository git remote add scimain https://github.com/eshimab/scidev List the available Repository URL Aliases using git remote without any additional arguments - Use the --verbose or -v flag to show additional info git remote --verbose Output: Git Remote Repository Aliases Now we can remove the old alias origin because it points to the same GitHub Repository URL as the new created alias scimain - Deleting the origin alias will not affect your connection to the remote repository as long as you have another valid remote alias configured. git remote remove origin ## Check for changes git remote --verbose Output: After Deleting the old `origin` repository url alias","title":"Managing GitHub Repository Url Aliases with git remote"},{"location":"shellnotes/#pushing-files-with-git-push","text":"","title":"Pushing Files with git push"},{"location":"shellnotes/#git-push-the-local-git-commit-to-the-github-repobranch-scidevmain","text":"Use the GitHub Repository URL alias scimain that points to the full URL https://github.com/eshimab/scidev (check this with git remote --verbose ) Push the commits done on the local branch main with git push to the GitHub Repository scimain (the alias for http://github.com/eshimab/scidev ) git push scimain main See output for checking the git remote alias name with the --verbose flag, then running the git push command, sending commits in the local branch main to the repository linked in the alias scimain . Local Command Output After git push And the GitHub webpage for scidev/main has been updated via the local machine push Github Webpage Updated","title":"git push the local git commit to the GitHub repo/branch scidev/main"},{"location":"shellnotes/#summarizing-git-addcommitpush-to-repository","text":"Stage files with git add bash git add * Preview if desired with git status Commit Staged files with git commit Add a commit message with -m \"message text\" bash git commit -m \"updates to notesite\" Push the commit (containing the staged files) to the remote directory using git remote <local-remote-alias> <local-branch-name> bash git push scimain main You can list the local <local-remote-alias> avilable using git remote --verbose bash dhcp-168-105-223-225:scidev eshim$ git remote --verbose scimain https://github.com/eshimab/scidev (fetch) scimain https://github.com/eshimab/scidev (push) For this example, the <local-remote-alias> is scimain and points to https://github.io/eshimab/scidev For this example, the <local-branch-name> is main and is recorded in the Github repo as scidev/main See that we are on branch main using git status ```bash dhcp-168-105-223-225:scidev eshim$ git status On branch main Changes not staged for commit: (use \"git add ...\" to update what will be committed) (use \"git checkout -- ...\" to discard changes in working directory) modified: notesite/docs/shellnotes.md no changes added to commit (use \"git add\" and/or \"git commit -a\") dhcp-168-105-223-225:scidev eshim$ 4. See Output from `git push scimain main` bash dhcp-168-105-223-225:scidev eshim$ git push scimain main Enumerating objects: 15, done. Counting objects: 100% (15/15), done. Delta compression using up to 10 threads Compressing objects: 100% (10/10), done. Writing objects: 100% (10/10), 237.52 KiB | 33.93 MiB/s, done. Total 10 (delta 4), reused 0 (delta 0) remote: Resolving deltas: 100% (4/4), completed with 4 local objects. To https://github.com/eshimab/scidev eb213eb..4d8a21e main -> main dhcp-168-105-223-225:scidev eshim$ ```","title":"Summarizing Git Add/Commit/Push to Repository"},{"location":"shellnotes/#more-standard-git-setups","text":"","title":"More standard git setups"},{"location":"shellnotes/#adding-git-hooks","text":"cd ~/scidev git add .git/hooks/pre-commit git add .git/hooks/post-commit","title":"Adding git hooks"},{"location":"shellnotes/#-","text":"","title":"---"},{"location":"shellnotes/#adding-and-updating-files-and-directories-to-an-established-git-repo","text":"","title":"Adding and updating files and directories to an established git repo"},{"location":"shellnotes/#initializing-a-git-repo-using-a-local-directory-with-a-generic-empty-repo-already-on-github","text":"To use your local \"scidev\" folder to update your GitHub repository named \"scidev\" while creating a .gitignore file and a pre-commit Git hook to limit staging to files below 1MB, follow these steps: [ ] Create the .gitignore file: [ ] Open a text editor and create a file named \".gitignore\" in the root directory of your \"scidev\" folder. [ ] Add the necessary patterns to ignore files in the .gitignore file. For example, you can add *.pdf to ignore all PDF files. bash # Ignore directories withim scidev: # The leading / means that these are subdirectories within scidev where the .gitignore file is found # The trailing / means that we are targetting a directory and all it's contents /assets/packages/ /envsdir/mdocs/bin/ /envsdir/mdocs/lib/ # # Ignore Filetypes *.pdf *.mat [ ] Create the pre-commit Git hook: [ ] Open a text editor and create a file named \"pre-commit\" (without an extension) in the \".git/hooks\" directory of your \"scidev\" repository. bash touch /Users/eshim/scidev/.git/hooks/pre-commit [ ] Copy and paste the following script into the \"pre-commit\" file: ```bash #!/bin/bash MAX_FILE_SIZE=1048576 # 1MB in bytes # Get the list of staged files files=$(git diff --cached --name-only) # Loop through the staged files for file in $files; do # Get the file size in bytes file_size=$(wc -c < \"$file\") # Compare file size with the maximum size if [ \"$file_size\" -gt \"$MAX_FILE_SIZE\" ]; then # Remove the file from the staging area git reset HEAD \"$file\" echo \"File $file exceeds the maximum file size limit. It has been excluded from the commit.\" fi done # exit 0 - [ ] Save the file and make it executable by running the following command in the terminal: bash chmod +x /Users/eshim/scidev/.git/hooks/pre-commit - [ ] Initialize Git and connect to your GitHub repository: - [ ] Open a terminal or command prompt and navigate to your \"scidev\" folder. bash cd /Users/eshim/scidev - [ ] Run the following commands: bash git init git remote add origin https://github.com/eshimab/scidev - [ ] Replace `<repository-url>` with the URL of your GitHub repository. - [ ] Add and commit files: - [ ] Add the files you want to include in the commit using `git add`. - [ ] Commit the changes using `git commit -m \"Initial commit\"`. bash git add notesite/ git commit -m \"Initial Commit for directory notesite/ \" ``` With these steps, your local \"scidev\" folder will be updated with the .gitignore file and the pre-commit Git hook. The pre-commit hook will exclude files above 1MB from being staged in your commits. Remember to customize the MAX_FILE_SIZE variable in the pre-commit script if you want a different maximum file size limit.","title":"Initializing a git repo using a local directory (with a generic, empty repo already on GitHub)"},{"location":"vsnotes/","text":"Using VS Code for general development Editor Hacks Show more document tabs in the workbench.editor // Increase number of tabs visible on an editor window \"workbench.editor.tabSizing\": \"shrink\" Converting Atom cofee script to VS Code JavaScript # ------------------ CURSOR TO NEXT CHUNK ---------------------- atom.commands.add 'atom-text-editor', 'cursor-to-next-chunk': -> # ----------------- Get cursor where it starts ------------------- cursorPointStart = atom.workspace.getActiveTextEditor()?.getCursorBufferPosition() # ----------------- Move cursor to end of line ------------------- atom.workspace.getActiveTextEditor()?.getLastCursor().moveToEndOfLine() # ----------------- Get cursor at end of line ------------------- cursorPoint = atom.workspace.getActiveTextEditor()?.getCursorBufferPosition() rowStartBlank = false # init if cursorPointStart.column is 0 and cursorPoint.column is 0 rowStartBlank = true # ----------------- Error Checking ------------------- startLineComment = atom.workspace.getActiveTextEditor()?.isBufferRowCommented(cursorPoint.row) # ----------------- Init i and begin loop ------------------- i = 1 loop i = i + 1 # ----------------- Move cursor down one line ------------------- atom.workspace.getActiveTextEditor()?.getLastCursor().moveToEndOfLine() atom.workspace.getActiveTextEditor()?.getLastCursor().moveDown(1) atom.workspace.getActiveTextEditor()?.getLastCursor().moveToBeginningOfLine() # ----------------- Get cursor status at start of line ------------------- cursorPointStart = atom.workspace.getActiveTextEditor()?.getCursorBufferPosition() # ----------------- Move cursor to end of line ------------------- atom.workspace.getActiveTextEditor()?.getLastCursor().moveToEndOfLine() # ----------------- Get cursor status at end of line ------------------- cursorPoint = atom.workspace.getActiveTextEditor()?.getCursorBufferPosition() # ----------------- Check for row being a comment ------------------- thisLineComment = atom.workspace.getActiveTextEditor()?.isBufferRowCommented(cursorPoint.row) # ----------------- If starting row was not empty ------------------- if rowStartBlank is false # ----------------- If start at comment, and current line is not comment ------------------- if startLineComment is true and thisLineComment is false atom.workspace.getActiveTextEditor()?.getLastCursor().moveToEndOfLine() # Move to start of line atom.workspace.getActiveTextEditor()?.getLastCursor().moveToBeginningOfLine() break # ----------------- If start at NOT comment, and current line IS comment ------------------- if startLineComment is false and thisLineComment is true atom.workspace.getActiveTextEditor()?.getLastCursor().moveToEndOfLine() # Move to start of line atom.workspace.getActiveTextEditor()?.getLastCursor().moveToBeginningOfLine() break # ----------------- If start NOT empty and current IS empty ------------------- if cursorPointStart.column == 0 and cursorPoint.column == 0 atom.workspace.getActiveTextEditor()?.getLastCursor().moveToEndOfLine() # Move to start of line atom.workspace.getActiveTextEditor()?.getLastCursor().moveToBeginningOfLine() break # ----------------- If Starting Row was blank ------------------- else # ----------------- If this row also blank, do nothing ------------------- if cursorPointStart.column == 0 and cursorPoint.column == 0 # ----------------- If this row not blank, stop ------------------- else atom.workspace.getActiveTextEditor()?.getLastCursor().moveToEndOfLine() # Move to start of line atom.workspace.getActiveTextEditor()?.getLastCursor().moveToBeginningOfLine() break # Move to start of line atom.workspace.getActiveTextEditor()?.getLastCursor().moveToBeginningOfLine() # ----------------- To Prevent run-away loops ------------------- if i == 30 atom.workspace.getActiveTextEditor()?.getLastCursor().moveToEndOfLine() break # Move to start of line atom.workspace.getActiveTextEditor()?.getLastCursor().moveToBeginningOfLine() It might be easier to do this from scratch...","title":"vscode"},{"location":"vsnotes/#using-vs-code-for-general-development","text":"","title":"Using VS Code for general development"},{"location":"vsnotes/#editor-hacks","text":"","title":"Editor Hacks"},{"location":"vsnotes/#show-more-document-tabs-in-the-workbencheditor","text":"// Increase number of tabs visible on an editor window \"workbench.editor.tabSizing\": \"shrink\"","title":"Show more document tabs in the workbench.editor"},{"location":"vsnotes/#converting-atom-cofee-script-to-vs-code-javascript","text":"# ------------------ CURSOR TO NEXT CHUNK ---------------------- atom.commands.add 'atom-text-editor', 'cursor-to-next-chunk': -> # ----------------- Get cursor where it starts ------------------- cursorPointStart = atom.workspace.getActiveTextEditor()?.getCursorBufferPosition() # ----------------- Move cursor to end of line ------------------- atom.workspace.getActiveTextEditor()?.getLastCursor().moveToEndOfLine() # ----------------- Get cursor at end of line ------------------- cursorPoint = atom.workspace.getActiveTextEditor()?.getCursorBufferPosition() rowStartBlank = false # init if cursorPointStart.column is 0 and cursorPoint.column is 0 rowStartBlank = true # ----------------- Error Checking ------------------- startLineComment = atom.workspace.getActiveTextEditor()?.isBufferRowCommented(cursorPoint.row) # ----------------- Init i and begin loop ------------------- i = 1 loop i = i + 1 # ----------------- Move cursor down one line ------------------- atom.workspace.getActiveTextEditor()?.getLastCursor().moveToEndOfLine() atom.workspace.getActiveTextEditor()?.getLastCursor().moveDown(1) atom.workspace.getActiveTextEditor()?.getLastCursor().moveToBeginningOfLine() # ----------------- Get cursor status at start of line ------------------- cursorPointStart = atom.workspace.getActiveTextEditor()?.getCursorBufferPosition() # ----------------- Move cursor to end of line ------------------- atom.workspace.getActiveTextEditor()?.getLastCursor().moveToEndOfLine() # ----------------- Get cursor status at end of line ------------------- cursorPoint = atom.workspace.getActiveTextEditor()?.getCursorBufferPosition() # ----------------- Check for row being a comment ------------------- thisLineComment = atom.workspace.getActiveTextEditor()?.isBufferRowCommented(cursorPoint.row) # ----------------- If starting row was not empty ------------------- if rowStartBlank is false # ----------------- If start at comment, and current line is not comment ------------------- if startLineComment is true and thisLineComment is false atom.workspace.getActiveTextEditor()?.getLastCursor().moveToEndOfLine() # Move to start of line atom.workspace.getActiveTextEditor()?.getLastCursor().moveToBeginningOfLine() break # ----------------- If start at NOT comment, and current line IS comment ------------------- if startLineComment is false and thisLineComment is true atom.workspace.getActiveTextEditor()?.getLastCursor().moveToEndOfLine() # Move to start of line atom.workspace.getActiveTextEditor()?.getLastCursor().moveToBeginningOfLine() break # ----------------- If start NOT empty and current IS empty ------------------- if cursorPointStart.column == 0 and cursorPoint.column == 0 atom.workspace.getActiveTextEditor()?.getLastCursor().moveToEndOfLine() # Move to start of line atom.workspace.getActiveTextEditor()?.getLastCursor().moveToBeginningOfLine() break # ----------------- If Starting Row was blank ------------------- else # ----------------- If this row also blank, do nothing ------------------- if cursorPointStart.column == 0 and cursorPoint.column == 0 # ----------------- If this row not blank, stop ------------------- else atom.workspace.getActiveTextEditor()?.getLastCursor().moveToEndOfLine() # Move to start of line atom.workspace.getActiveTextEditor()?.getLastCursor().moveToBeginningOfLine() break # Move to start of line atom.workspace.getActiveTextEditor()?.getLastCursor().moveToBeginningOfLine() # ----------------- To Prevent run-away loops ------------------- if i == 30 atom.workspace.getActiveTextEditor()?.getLastCursor().moveToEndOfLine() break # Move to start of line atom.workspace.getActiveTextEditor()?.getLastCursor().moveToBeginningOfLine() It might be easier to do this from scratch...","title":"Converting Atom cofee script to VS Code JavaScript"},{"location":"workflow/","text":"This is the workflow for documentation using MkDocs and website hosting using GitHub Pages. Verify Branch and remote repository alias Check your branch and remote repository aliases cd ~/scidev git status git remote --verbose You should see the alias scimain : dhcp-168-105-223-225:scidev eshim$ git remote --verbose scimain https://github.com/eshimab/eshimab.github.io (fetch) scimain https://github.com/eshimab/eshimab.github.io (push) Build site with mkdocs and Add/Commit/Push to Git After updating the markdown documents in scidev/notesite/docs # Move to the python3 virtual env bin directory to activate the venv cd ~/scidev source envsdir/mdocs/bin/activate # activate the python3 venv using command `source` cd ~/scidev/notesite # move to the mkdocs root directory mkdocs build # build the site with MkDocs # Move the mkdocs site to the scidev/docs so that GitHub Pages can find it rsync --archive --progress --recursive --verbose --delete-after ~/scidev/notesite/site/* ~/scidev/docs # Delete the generated site directory rm -vR ~/scidev/notesite/site # Add / Commit / Push got Git cd ~/scidev # Move to root dir of the local Git branch git status git remote --verbose # View the Remote Repository URL Aliases # Add Changes ie Stage Commits on local machine git add docs # this is the HTML site generated by mkdocs git add notesite # Because we updated the md files here git status # Create a Commit on local machine branch git commit -m \"Updates to the mkdocs site in scidev/docs\" # Push Changes from the local branch main and merge them with the repository alias scimain git push scimain main","title":"Workflow"},{"location":"workflow/#verify-branch-and-remote-repository-alias","text":"Check your branch and remote repository aliases cd ~/scidev git status git remote --verbose You should see the alias scimain : dhcp-168-105-223-225:scidev eshim$ git remote --verbose scimain https://github.com/eshimab/eshimab.github.io (fetch) scimain https://github.com/eshimab/eshimab.github.io (push)","title":"Verify Branch and remote repository alias"},{"location":"workflow/#build-site-with-mkdocs-and-addcommitpush-to-git","text":"After updating the markdown documents in scidev/notesite/docs # Move to the python3 virtual env bin directory to activate the venv cd ~/scidev source envsdir/mdocs/bin/activate # activate the python3 venv using command `source` cd ~/scidev/notesite # move to the mkdocs root directory mkdocs build # build the site with MkDocs # Move the mkdocs site to the scidev/docs so that GitHub Pages can find it rsync --archive --progress --recursive --verbose --delete-after ~/scidev/notesite/site/* ~/scidev/docs # Delete the generated site directory rm -vR ~/scidev/notesite/site # Add / Commit / Push got Git cd ~/scidev # Move to root dir of the local Git branch git status git remote --verbose # View the Remote Repository URL Aliases # Add Changes ie Stage Commits on local machine git add docs # this is the HTML site generated by mkdocs git add notesite # Because we updated the md files here git status # Create a Commit on local machine branch git commit -m \"Updates to the mkdocs site in scidev/docs\" # Push Changes from the local branch main and merge them with the repository alias scimain git push scimain main","title":"Build site with mkdocs and Add/Commit/Push to Git"}]}