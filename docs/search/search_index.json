{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"notesite \u00b6 Misadventures, documented. MkDocs Directory Structure \u00b6 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. about.md # The about file shellnotes.md # Or \"How to use git\" vsnotes.md # Tips for VS Code workflow.md # Standard Workflow img/ favicon.ico # Favicon git-example/ gitExample*.png # Pictures for gitnotes.md GitHub Info \u00b6 Repository:","title":"index"},{"location":"#notesite","text":"Misadventures, documented.","title":"notesite"},{"location":"#mkdocs-directory-structure","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. about.md # The about file shellnotes.md # Or \"How to use git\" vsnotes.md # Tips for VS Code workflow.md # Standard Workflow img/ favicon.ico # Favicon git-example/ gitExample*.png # Pictures for gitnotes.md","title":"MkDocs Directory Structure"},{"location":"#github-info","text":"Repository:","title":"GitHub Info"},{"location":"about/","text":"Starting directory structure. \u00b6 # Define the core directory dircore=\"/Users/eshim/scidev\" direnvs=\"${dircore}/envsdir\" dirmdoc=\"${direnvs}/mdocs\" dirasst=\"${dircore}/assets\" dirpckg=\"${dirasst}/packges\" filecore=\"corefile.md\" # Make Dirs mkdir -p \"$direnvs\" mkdir -p \"$dirmdoc\" mkdir -p \"$dirasst\" mkdir -p \"$dirpckg\" Tips: 1. When doing the BASH variable assignment, the = symbol should not have spaces on either side. 2. (CB) In this code, the directories direnvs and dirmdoc are created using the mkdir command with the -p option. The -p option ensures that parent directories are created if they don't already exist. The variable values are correctly concatenated using the ${variable} syntax. 3. Pick up the command line tool tree to visualize the directory structure: bash # Get the program homebrew /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" # Use homebrew to install tree brew install tree Create a python3 virtual environment ( venv ) to run Mkdocs \u00b6 # Create the python3 venv python3 -m venv \"${dirmdoc}\" # Activate the venv source \"${dirmdoc}/bin/activate\" # Go there cd ${dircore} Tips: 1. Notice that the variable is wrapped in \"\" because the command input should be a string 2. CB: By using the -m (there is no long-form version) flag followed by the module name (venv), you are instructing the Python interpreter to execute the venv module's script functionality. This allows you to create a virtual environment using the python3 -m venv command, without explicitly running a separate Python script or invoking a specific Python file. Now we are working in the python3 environment where lines should be preceded by (mdocs) hostname:scidev username$ # Upgrade pip so that it doesn't complain python3 -m pip install --upgrade pip # install the local Mkdocs package, version 1.4.3 python3 -m pip install \"/Users/eshim/scidev/assets/packages/mkdocs-1.4.3.tar.gz\" Then create the MkDocs project directory in the python3 venv mkdocs new \"/Users/eshim/scidev/notesite\" cd /Users/eshim/scidev/notesite mkdocs serve And you get output: INFO - Building documentation... INFO - Cleaning site directory INFO - Documentation built in 0.06 seconds INFO - [10:50:41] Watching paths for changes: 'docs', 'mkdocs.yml' INFO - [10:50:41] Serving on http://127.0.0.1:8000/ It will serve on Your local Macine Now leave this Terminal instance running and let it update the site in the background. I will call this the Mkdocs Server Terminal or similarly. Open a new terminal window Get an example page from Mkdocs and send it to the Mkdocs website directory notesite curl 'https://jaspervdj.be/lorem-markdownum/markdown.txt' > /Users/eshim/scidev/notesite/docs/about.md In the Mkdocs Server Terminal you will see an update as it adds the new webpage: INFO - [11:36:50] Detected file changes INFO - Building documentation... INFO - Documentation built in 0.07 seconds INFO - [11:36:50] Reloading browsers INFO - [11:36:50] Browser connected: http://127.0.0.1:8000/ Edit the mkdocs.yml file in ~/scidev/notesite site_name: Super Fun Digressions # site_name and site_url are the only required fields site_url: https://example.com # https://example.com is a placeholder value nav: - Home: index.md - About: about.md Creating a shell script for displaying file trees \u00b6 Open a terminal window. Open your shell's configuration file using a text editor. For example: bash nano ~/.bashrc Ok Ok","title":"about"},{"location":"about/#starting-directory-structure","text":"# Define the core directory dircore=\"/Users/eshim/scidev\" direnvs=\"${dircore}/envsdir\" dirmdoc=\"${direnvs}/mdocs\" dirasst=\"${dircore}/assets\" dirpckg=\"${dirasst}/packges\" filecore=\"corefile.md\" # Make Dirs mkdir -p \"$direnvs\" mkdir -p \"$dirmdoc\" mkdir -p \"$dirasst\" mkdir -p \"$dirpckg\" Tips: 1. When doing the BASH variable assignment, the = symbol should not have spaces on either side. 2. (CB) In this code, the directories direnvs and dirmdoc are created using the mkdir command with the -p option. The -p option ensures that parent directories are created if they don't already exist. The variable values are correctly concatenated using the ${variable} syntax. 3. Pick up the command line tool tree to visualize the directory structure: bash # Get the program homebrew /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" # Use homebrew to install tree brew install tree","title":"Starting directory structure."},{"location":"about/#create-a-python3-virtual-environment-venv-to-run-mkdocs","text":"# Create the python3 venv python3 -m venv \"${dirmdoc}\" # Activate the venv source \"${dirmdoc}/bin/activate\" # Go there cd ${dircore} Tips: 1. Notice that the variable is wrapped in \"\" because the command input should be a string 2. CB: By using the -m (there is no long-form version) flag followed by the module name (venv), you are instructing the Python interpreter to execute the venv module's script functionality. This allows you to create a virtual environment using the python3 -m venv command, without explicitly running a separate Python script or invoking a specific Python file. Now we are working in the python3 environment where lines should be preceded by (mdocs) hostname:scidev username$ # Upgrade pip so that it doesn't complain python3 -m pip install --upgrade pip # install the local Mkdocs package, version 1.4.3 python3 -m pip install \"/Users/eshim/scidev/assets/packages/mkdocs-1.4.3.tar.gz\" Then create the MkDocs project directory in the python3 venv mkdocs new \"/Users/eshim/scidev/notesite\" cd /Users/eshim/scidev/notesite mkdocs serve And you get output: INFO - Building documentation... INFO - Cleaning site directory INFO - Documentation built in 0.06 seconds INFO - [10:50:41] Watching paths for changes: 'docs', 'mkdocs.yml' INFO - [10:50:41] Serving on http://127.0.0.1:8000/ It will serve on Your local Macine Now leave this Terminal instance running and let it update the site in the background. I will call this the Mkdocs Server Terminal or similarly. Open a new terminal window Get an example page from Mkdocs and send it to the Mkdocs website directory notesite curl 'https://jaspervdj.be/lorem-markdownum/markdown.txt' > /Users/eshim/scidev/notesite/docs/about.md In the Mkdocs Server Terminal you will see an update as it adds the new webpage: INFO - [11:36:50] Detected file changes INFO - Building documentation... INFO - Documentation built in 0.07 seconds INFO - [11:36:50] Reloading browsers INFO - [11:36:50] Browser connected: http://127.0.0.1:8000/ Edit the mkdocs.yml file in ~/scidev/notesite site_name: Super Fun Digressions # site_name and site_url are the only required fields site_url: https://example.com # https://example.com is a placeholder value nav: - Home: index.md - About: about.md","title":"Create a python3 virtual environment (venv) to run Mkdocs"},{"location":"about/#creating-a-shell-script-for-displaying-file-trees","text":"Open a terminal window. Open your shell's configuration file using a text editor. For example: bash nano ~/.bashrc Ok Ok","title":"Creating a shell script for displaying file trees"},{"location":"gitnotes/","text":"Git \u00b6 Working with active git repositories \u00b6 Comitting a new local directory to the GitHub Repository \u00b6 Git Repo Info \u00b6 Github Repository: https://github.com/eshimab/scidev Branches main GitHub Website Before Commit Local Git Branch main \u00b6 GitHub Local Directory Before Commit See that the assets dir is located in the local scidev dhcp-168-105-223-225:scidev eshim$ ls -la total 56 drwxr-xr-x 11 eshim staff 352 Jul 10 13:11 . drwxr-xr-x@ 94 eshim staff 3008 Jul 10 13:11 .. -rw-r--r--@ 1 eshim staff 10244 Jul 10 13:49 .DS_Store drwxr-xr-x 17 eshim staff 544 Jul 10 13:51 .git -rw-r--r-- 1 eshim staff 315 Jul 6 23:57 .gitignore -rw-r--r-- 1 eshim staff 1062 Jul 10 12:14 LICENSE -rw-r--r-- 1 eshim staff 54 Jul 10 12:14 README.md drwxr-xr-x 5 eshim staff 160 Jul 6 16:31 assets -rw-r--r-- 1 eshim staff 3713 Jul 10 13:11 corefile.md drwxr-xr-x 4 eshim staff 128 Jul 5 17:33 envsdir drwxr-xr-x 6 eshim staff 192 Jul 10 13:15 notesite dhcp-168-105-223-225:scidev eshim$ git add local dirs and files to prepare for the commit \u00b6 We want to git add the directory scidev/assets/files/ to our next git commit . Notes - The -r or --recursive flag is not necessary since Git automatically traverses directories recursively when adding files. Starting in ~/scidev directory git add assets/files git add envsdir/mdocs/bin Check git status git status See Output: Git Status After Adding assets/files and envsdir/mdocs/bin Example Repeat : add scidev/notesite/img/* (start in ~/scidev ) cd ~/scidev git add notesite/img Git Status After Adding notesite/img/* Git Commit vs Push \u00b6 In Git, a commit and a push are two separate operations that serve different purposes: Git Commit: Purpose: Creating a new commit to save your changes locally within your Git repository. Usage: The git commit command is used to record your changes and create a new commit in your local repository. It captures the current state of your files, including any modifications, additions, or deletions. Each commit has a unique identifier and contains information such as the author, timestamp, and commit message describing the changes. Local Operation: When you run git commit , the commit is created only within your local Git repository on your machine. It does not affect the remote repository or other collaborators' copies of the repository. Git Push: Purpose: Sending your local commits to a remote repository, typically hosted on a platform like GitHub, GitLab, or Bitbucket. Usage: The git push command is used to upload your local commits to a remote repository. It transfers your committed changes from your local repository to the corresponding branch in the remote repository. This allows you to share your changes with others, collaborate on the project, and synchronize your work with the remote repository. Remote Operation: When you run git push , Git sends your committed changes to the remote repository, updating the branch's commit history and files on the remote server. Other collaborators can then fetch or pull your changes into their own local repositories to incorporate your work. In summary, a commit is a local operation that saves your changes within your local repository, while a push is used to send your local commits to a remote repository to share and synchronize your changes with others. Commits are made locally, and pushes are performed to update the remote repository with your local commits. Create a local git commit to incorporate the changes done with git add or changes to files directly in scidev because we have been editting the branch scidev/main \u00b6 Commit the directory changes and add a Commit Message using the -m flag git commit -m \"Added directories scidev/bin scidev/assets/files scidev/notesite/img\" See Output: Git Commit Command Output But we still have changes on files that were not added. This message was shown in git status Untracked Files in Git Status So we need to add these files with git add # Go to main branch directory cd ~/scidev git add .gitignore git add notesite git add mdocs/pyvenv.cfg See git status output New Git Status Now do another commit to github.io/eshimab/scidev/main git commit -m \"Updated notesite, added envsdir/mdoc/pyenvs.cfg, updated .gitignore\" See Output Final Commit Example Managing GitHub Repository Url Aliases with git remote \u00b6 We can check that the repository url is correct by using the git remote command with the get-url flag for the GitHub repository that we refer to with the local alias origin . You can think of origin as a short-hand for the repository url. The origin alis is created using the git remote command with the add option to define a local repository URL alias we will call scimain from the GitHub Repository git remote add scimain https://github.com/eshimab/scidev List the available Repository URL Aliases using git remote without any additional arguments - Use the --verbose or -v flag to show additional info git remote --verbose Output: Git Remote Repository Aliases Now we can remove the old alias origin because it points to the same GitHub Repository URL as the new created alias scimain - Deleting the origin alias will not affect your connection to the remote repository as long as you have another valid remote alias configured. git remote remove origin ## Check for changes git remote --verbose Output: After Deleting the old `origin` repository url alias Pushing Files with git push \u00b6 git push the local git commit to the GitHub repo/branch scidev/main \u00b6 Use the GitHub Repository URL alias scimain that points to the full URL https://github.com/eshimab/scidev (check this with git remote --verbose ) Push the commits done on the local branch main with git push to the GitHub Repository scimain (the alias for http://github.com/eshimab/scidev ) git push scimain main See output for checking the git remote alias name with the --verbose flag, then running the git push command, sending commits in the local branch main to the repository linked in the alias scimain . Local Command Output After git push And the GitHub webpage for scidev/main has been updated via the local machine push Github Webpage Updated Summarizing Git Add/Commit/Push to Repository \u00b6 Stage files with git add bash git add * Preview if desired with git status Commit Staged files with git commit Add a commit message with -m \"message text\" bash git commit -m \"updates to notesite\" Push the commit (containing the staged files) to the remote directory using git remote <local-remote-alias> <local-branch-name> bash git push scimain main You can list the local <local-remote-alias> avilable using git remote --verbose bash dhcp-168-105-223-225:scidev eshim$ git remote --verbose scimain https://github.com/eshimab/scidev (fetch) scimain https://github.com/eshimab/scidev (push) For this example, the <local-remote-alias> is scimain and points to https://github.io/eshimab/scidev For this example, the <local-branch-name> is main and is recorded in the Github repo as scidev/main See that we are on branch main using git status ```bash dhcp-168-105-223-225:scidev eshim$ git status On branch main Changes not staged for commit: (use \"git add ...\" to update what will be committed) (use \"git checkout -- ...\" to discard changes in working directory) modified: notesite/docs/shellnotes.md no changes added to commit (use \"git add\" and/or \"git commit -a\") dhcp-168-105-223-225:scidev eshim$ 4. See Output from `git push scimain main` bash dhcp-168-105-223-225:scidev eshim$ git push scimain main Enumerating objects: 15, done. Counting objects: 100% (15/15), done. Delta compression using up to 10 threads Compressing objects: 100% (10/10), done. Writing objects: 100% (10/10), 237.52 KiB | 33.93 MiB/s, done. Total 10 (delta 4), reused 0 (delta 0) remote: Resolving deltas: 100% (4/4), completed with 4 local objects. To https://github.com/eshimab/scidev eb213eb..4d8a21e main -> main dhcp-168-105-223-225:scidev eshim$ ``` More standard git setups \u00b6 Adding git hooks \u00b6 cd ~/scidev git add .git/hooks/pre-commit git add .git/hooks/post-commit --- \u00b6 Adding and updating files and directories to an established git repo \u00b6 Initializing a git repo using a local directory (with a generic, empty repo already on GitHub) \u00b6 To use your local \"scidev\" folder to update your GitHub repository named \"scidev\" while creating a .gitignore file and a pre-commit Git hook to limit staging to files below 1MB, follow these steps: [ ] Create the .gitignore file: [ ] Open a text editor and create a file named \".gitignore\" in the root directory of your \"scidev\" folder. [ ] Add the necessary patterns to ignore files in the .gitignore file. For example, you can add *.pdf to ignore all PDF files. bash # Ignore directories withim scidev: # The leading / means that these are subdirectories within scidev where the .gitignore file is found # The trailing / means that we are targetting a directory and all it's contents /assets/packages/ /envsdir/mdocs/bin/ /envsdir/mdocs/lib/ # # Ignore Filetypes *.pdf *.mat [ ] Create the pre-commit Git hook: [ ] Open a text editor and create a file named \"pre-commit\" (without an extension) in the \".git/hooks\" directory of your \"scidev\" repository. bash touch /Users/eshim/scidev/.git/hooks/pre-commit [ ] Copy and paste the following script into the \"pre-commit\" file: ```bash #!/bin/bash MAX_FILE_SIZE=1048576 # 1MB in bytes # Get the list of staged files files=$(git diff --cached --name-only) # Loop through the staged files for file in $files; do # Get the file size in bytes file_size=$(wc -c < \"$file\") # Compare file size with the maximum size if [ \"$file_size\" -gt \"$MAX_FILE_SIZE\" ]; then # Remove the file from the staging area git reset HEAD \"$file\" echo \"File $file exceeds the maximum file size limit. It has been excluded from the commit.\" fi done # exit 0 - [ ] Save the file and make it executable by running the following command in the terminal: bash chmod +x /Users/eshim/scidev/.git/hooks/pre-commit - [ ] Initialize Git and connect to your GitHub repository: - [ ] Open a terminal or command prompt and navigate to your \"scidev\" folder. bash cd /Users/eshim/scidev - [ ] Run the following commands: bash git init git remote add origin https://github.com/eshimab/scidev `` - [ ] Replace with the URL of your GitHub repository. - [ ] Add and commit files: - [ ] Add the files you want to include in the commit using git add . - [ ] Commit the changes using git commit -m \"Initial commit\"`. bash git add notesite/** git commit -m \"Initial Commit for directory notesite/**\" With these steps, your local \"scidev\" folder will be updated with the .gitignore file and the pre-commit Git hook. The pre-commit hook will exclude files above 1MB from being staged in your commits. Remember to customize the MAX_FILE_SIZE variable in the pre-commit script if you want a different maximum file size limit.","title":"gitnotes"},{"location":"gitnotes/#git","text":"","title":"Git"},{"location":"gitnotes/#working-with-active-git-repositories","text":"","title":"Working with active git repositories"},{"location":"gitnotes/#comitting-a-new-local-directory-to-the-github-repository","text":"","title":"Comitting a new local directory to the GitHub Repository"},{"location":"gitnotes/#git-repo-info","text":"Github Repository: https://github.com/eshimab/scidev Branches main GitHub Website Before Commit","title":"Git Repo Info"},{"location":"gitnotes/#local-git-branch-main","text":"GitHub Local Directory Before Commit See that the assets dir is located in the local scidev dhcp-168-105-223-225:scidev eshim$ ls -la total 56 drwxr-xr-x 11 eshim staff 352 Jul 10 13:11 . drwxr-xr-x@ 94 eshim staff 3008 Jul 10 13:11 .. -rw-r--r--@ 1 eshim staff 10244 Jul 10 13:49 .DS_Store drwxr-xr-x 17 eshim staff 544 Jul 10 13:51 .git -rw-r--r-- 1 eshim staff 315 Jul 6 23:57 .gitignore -rw-r--r-- 1 eshim staff 1062 Jul 10 12:14 LICENSE -rw-r--r-- 1 eshim staff 54 Jul 10 12:14 README.md drwxr-xr-x 5 eshim staff 160 Jul 6 16:31 assets -rw-r--r-- 1 eshim staff 3713 Jul 10 13:11 corefile.md drwxr-xr-x 4 eshim staff 128 Jul 5 17:33 envsdir drwxr-xr-x 6 eshim staff 192 Jul 10 13:15 notesite dhcp-168-105-223-225:scidev eshim$","title":"Local Git Branch main"},{"location":"gitnotes/#git-add-local-dirs-and-files-to-prepare-for-the-commit","text":"We want to git add the directory scidev/assets/files/ to our next git commit . Notes - The -r or --recursive flag is not necessary since Git automatically traverses directories recursively when adding files. Starting in ~/scidev directory git add assets/files git add envsdir/mdocs/bin Check git status git status See Output: Git Status After Adding assets/files and envsdir/mdocs/bin Example Repeat : add scidev/notesite/img/* (start in ~/scidev ) cd ~/scidev git add notesite/img Git Status After Adding notesite/img/*","title":"git add local dirs and files to prepare for the commit"},{"location":"gitnotes/#git-commit-vs-push","text":"In Git, a commit and a push are two separate operations that serve different purposes: Git Commit: Purpose: Creating a new commit to save your changes locally within your Git repository. Usage: The git commit command is used to record your changes and create a new commit in your local repository. It captures the current state of your files, including any modifications, additions, or deletions. Each commit has a unique identifier and contains information such as the author, timestamp, and commit message describing the changes. Local Operation: When you run git commit , the commit is created only within your local Git repository on your machine. It does not affect the remote repository or other collaborators' copies of the repository. Git Push: Purpose: Sending your local commits to a remote repository, typically hosted on a platform like GitHub, GitLab, or Bitbucket. Usage: The git push command is used to upload your local commits to a remote repository. It transfers your committed changes from your local repository to the corresponding branch in the remote repository. This allows you to share your changes with others, collaborate on the project, and synchronize your work with the remote repository. Remote Operation: When you run git push , Git sends your committed changes to the remote repository, updating the branch's commit history and files on the remote server. Other collaborators can then fetch or pull your changes into their own local repositories to incorporate your work. In summary, a commit is a local operation that saves your changes within your local repository, while a push is used to send your local commits to a remote repository to share and synchronize your changes with others. Commits are made locally, and pushes are performed to update the remote repository with your local commits.","title":"Git Commit vs Push"},{"location":"gitnotes/#create-a-local-git-commit-to-incorporate-the-changes-done-with-git-add-or-changes-to-files-directly-in-scidev-because-we-have-been-editting-the-branch-scidevmain","text":"Commit the directory changes and add a Commit Message using the -m flag git commit -m \"Added directories scidev/bin scidev/assets/files scidev/notesite/img\" See Output: Git Commit Command Output But we still have changes on files that were not added. This message was shown in git status Untracked Files in Git Status So we need to add these files with git add # Go to main branch directory cd ~/scidev git add .gitignore git add notesite git add mdocs/pyvenv.cfg See git status output New Git Status Now do another commit to github.io/eshimab/scidev/main git commit -m \"Updated notesite, added envsdir/mdoc/pyenvs.cfg, updated .gitignore\" See Output Final Commit Example","title":"Create a local git commit to incorporate the changes done with git add or changes to files directly in scidev because we have been editting the branch scidev/main"},{"location":"gitnotes/#managing-github-repository-url-aliases-with-git-remote","text":"We can check that the repository url is correct by using the git remote command with the get-url flag for the GitHub repository that we refer to with the local alias origin . You can think of origin as a short-hand for the repository url. The origin alis is created using the git remote command with the add option to define a local repository URL alias we will call scimain from the GitHub Repository git remote add scimain https://github.com/eshimab/scidev List the available Repository URL Aliases using git remote without any additional arguments - Use the --verbose or -v flag to show additional info git remote --verbose Output: Git Remote Repository Aliases Now we can remove the old alias origin because it points to the same GitHub Repository URL as the new created alias scimain - Deleting the origin alias will not affect your connection to the remote repository as long as you have another valid remote alias configured. git remote remove origin ## Check for changes git remote --verbose Output: After Deleting the old `origin` repository url alias","title":"Managing GitHub Repository Url Aliases with git remote"},{"location":"gitnotes/#pushing-files-with-git-push","text":"","title":"Pushing Files with git push"},{"location":"gitnotes/#git-push-the-local-git-commit-to-the-github-repobranch-scidevmain","text":"Use the GitHub Repository URL alias scimain that points to the full URL https://github.com/eshimab/scidev (check this with git remote --verbose ) Push the commits done on the local branch main with git push to the GitHub Repository scimain (the alias for http://github.com/eshimab/scidev ) git push scimain main See output for checking the git remote alias name with the --verbose flag, then running the git push command, sending commits in the local branch main to the repository linked in the alias scimain . Local Command Output After git push And the GitHub webpage for scidev/main has been updated via the local machine push Github Webpage Updated","title":"git push the local git commit to the GitHub repo/branch scidev/main"},{"location":"gitnotes/#summarizing-git-addcommitpush-to-repository","text":"Stage files with git add bash git add * Preview if desired with git status Commit Staged files with git commit Add a commit message with -m \"message text\" bash git commit -m \"updates to notesite\" Push the commit (containing the staged files) to the remote directory using git remote <local-remote-alias> <local-branch-name> bash git push scimain main You can list the local <local-remote-alias> avilable using git remote --verbose bash dhcp-168-105-223-225:scidev eshim$ git remote --verbose scimain https://github.com/eshimab/scidev (fetch) scimain https://github.com/eshimab/scidev (push) For this example, the <local-remote-alias> is scimain and points to https://github.io/eshimab/scidev For this example, the <local-branch-name> is main and is recorded in the Github repo as scidev/main See that we are on branch main using git status ```bash dhcp-168-105-223-225:scidev eshim$ git status On branch main Changes not staged for commit: (use \"git add ...\" to update what will be committed) (use \"git checkout -- ...\" to discard changes in working directory) modified: notesite/docs/shellnotes.md no changes added to commit (use \"git add\" and/or \"git commit -a\") dhcp-168-105-223-225:scidev eshim$ 4. See Output from `git push scimain main` bash dhcp-168-105-223-225:scidev eshim$ git push scimain main Enumerating objects: 15, done. Counting objects: 100% (15/15), done. Delta compression using up to 10 threads Compressing objects: 100% (10/10), done. Writing objects: 100% (10/10), 237.52 KiB | 33.93 MiB/s, done. Total 10 (delta 4), reused 0 (delta 0) remote: Resolving deltas: 100% (4/4), completed with 4 local objects. To https://github.com/eshimab/scidev eb213eb..4d8a21e main -> main dhcp-168-105-223-225:scidev eshim$ ```","title":"Summarizing Git Add/Commit/Push to Repository"},{"location":"gitnotes/#more-standard-git-setups","text":"","title":"More standard git setups"},{"location":"gitnotes/#adding-git-hooks","text":"cd ~/scidev git add .git/hooks/pre-commit git add .git/hooks/post-commit","title":"Adding git hooks"},{"location":"gitnotes/#-","text":"","title":"---"},{"location":"gitnotes/#adding-and-updating-files-and-directories-to-an-established-git-repo","text":"","title":"Adding and updating files and directories to an established git repo"},{"location":"gitnotes/#initializing-a-git-repo-using-a-local-directory-with-a-generic-empty-repo-already-on-github","text":"To use your local \"scidev\" folder to update your GitHub repository named \"scidev\" while creating a .gitignore file and a pre-commit Git hook to limit staging to files below 1MB, follow these steps: [ ] Create the .gitignore file: [ ] Open a text editor and create a file named \".gitignore\" in the root directory of your \"scidev\" folder. [ ] Add the necessary patterns to ignore files in the .gitignore file. For example, you can add *.pdf to ignore all PDF files. bash # Ignore directories withim scidev: # The leading / means that these are subdirectories within scidev where the .gitignore file is found # The trailing / means that we are targetting a directory and all it's contents /assets/packages/ /envsdir/mdocs/bin/ /envsdir/mdocs/lib/ # # Ignore Filetypes *.pdf *.mat [ ] Create the pre-commit Git hook: [ ] Open a text editor and create a file named \"pre-commit\" (without an extension) in the \".git/hooks\" directory of your \"scidev\" repository. bash touch /Users/eshim/scidev/.git/hooks/pre-commit [ ] Copy and paste the following script into the \"pre-commit\" file: ```bash #!/bin/bash MAX_FILE_SIZE=1048576 # 1MB in bytes # Get the list of staged files files=$(git diff --cached --name-only) # Loop through the staged files for file in $files; do # Get the file size in bytes file_size=$(wc -c < \"$file\") # Compare file size with the maximum size if [ \"$file_size\" -gt \"$MAX_FILE_SIZE\" ]; then # Remove the file from the staging area git reset HEAD \"$file\" echo \"File $file exceeds the maximum file size limit. It has been excluded from the commit.\" fi done # exit 0 - [ ] Save the file and make it executable by running the following command in the terminal: bash chmod +x /Users/eshim/scidev/.git/hooks/pre-commit - [ ] Initialize Git and connect to your GitHub repository: - [ ] Open a terminal or command prompt and navigate to your \"scidev\" folder. bash cd /Users/eshim/scidev - [ ] Run the following commands: bash git init git remote add origin https://github.com/eshimab/scidev `` - [ ] Replace with the URL of your GitHub repository. - [ ] Add and commit files: - [ ] Add the files you want to include in the commit using git add . - [ ] Commit the changes using git commit -m \"Initial commit\"`. bash git add notesite/** git commit -m \"Initial Commit for directory notesite/**\" With these steps, your local \"scidev\" folder will be updated with the .gitignore file and the pre-commit Git hook. The pre-commit hook will exclude files above 1MB from being staged in your commits. Remember to customize the MAX_FILE_SIZE variable in the pre-commit script if you want a different maximum file size limit.","title":"Initializing a git repo using a local directory (with a generic, empty repo already on GitHub)"},{"location":"osnotes/","text":"Terminal \u00b6 Use ls -a to see hidden folder and files that start with . \u00b6 # Short-form ls -a # Combine with -l ls -al Yes, the long form of the -a option in the ls command is --all. Both -a and --all have the same functionality of showing all files, including hidden ones. Need to add code nano ~/.bash_profile","title":"Terminal"},{"location":"osnotes/#terminal","text":"","title":"Terminal"},{"location":"osnotes/#use-ls-a-to-see-hidden-folder-and-files-that-start-with","text":"# Short-form ls -a # Combine with -l ls -al Yes, the long form of the -a option in the ls command is --all. Both -a and --all have the same functionality of showing all files, including hidden ones. Need to add code nano ~/.bash_profile","title":"Use ls -a to see hidden folder and files that start with ."},{"location":"quickstart/","text":"Impractical Flow Cytometry \u00b6 Instrument Start-up \u00b6 Electronics \u00b6 Turn On InFlux \u00b6 Turn On Primary Power \"Power Strip 1\" Computer Table Turn On Instrument Power using Rocker Switch on Instrument Chassis Turn On Sort Chamber Illumination Light Turn On Power for the Vacuum Pump and Lasers using the Rocker Switches on the E 107 Unit. The Switches are numbered: 1 VAC - Vacuum Pump 2 488 - 488nm Coherent Laser 3 457 - 457nm Melles Griot Laser 4 671 - 671nm Opto Engine Laser Turn On Tektronix TDS 2014C Oscilliscope using the Power Switch on the Top Left Corner Check the Cameras using the Marshall Monitor \u00b6 Toggle Between the VIDEO 1 and VIDEO 2 Sources for each Monitor using the Silver Switch at the Upper Right Corner of the Monitor Left Monitor \"PIN HOLE\" VIDEO 1 - Pinhole Camera of the Stream and the Laser Pinholes VIDEO 2 - None Center Monitor \"DROP\" VIDEO 1 - FSC Pinhole Camera (located on the FSC optical path) VIDEO 2 - Drop Camera (For finding Break-off Point for Flow Sorting) The Drop Camera is moved with the Drop Camera Z Knob located near the Sheath Valve on the top of the Instrument If the Drop Camera seems dark, be sure that the Drop Camera Mirror is installed outside the Laser Chamber with the Flat Side facing towards the corner between the FSC and Side/Fluorescence lenses. There is an opening in the wall of the Laser Chamber, allowing light from the Drop Camera Mirror to illuminate the stream viewed by the Drop Camera. Right Monitor \"STREAM\" VIDEO 1 - Stream Camera (Shows Sort Chamber for Sorting and Coarse Alignment) If this Camera is dark, make sure to activate the yellow ILLUM Button located on the Front Right side of the Instrument Chassis Turn On Lasers using the PSU on the Instrument Chassis \u00b6 Turn On 488nm Coherent Laser Power Supply Unit with the following sequence: Power Switch Turn Key Use the dial to set the 488nm Laser Power Percent to 108 (as seen in the digital read-out) Turn On 457nm Melles Griot Laser Power Supply Unit with the following sequence: Power Switch Laser Power Button Turn Key to Enable (Optional) Turn On 671nm Opto Engine Laser Power Supply Unit Power Switch Use the dial to set Laser Power to 6.73? Turn On Computers \u00b6 Start Dell PC (CytoServer) Use the login info recorded locally. Wait for this PC to boot up and login to Desktop before proceeding Start HP PC (Sortware and Sensirion) Start SortWare Connect to Cytometer Start Sensirion Software Begin Logging Fluidics \u00b6 Fill Sheath Fluid Canister - Previous Day \u00b6 Measure with Graduated Cylinder For BioSure: Mixture is 1/8 BioSure Concentrate and 7/8 MilliQ Water For NaCl: Dissolve Xg NaCl in Y MillQ Water and let sit overnight Fill a 60ml Syringe with Sheath Fluid for Purging the instrument and filling sort tubes. Label Syringe. Attach a 0.2um Acrodisc Synring Filter to the synringe Hook-Up Waste Canister \u00b6 Connect InFlux Waste Lines Intake Connect Vacuum Pump Turn on Vacuum Pump (Pump is powered by InFlux Instrument Power) Install Nozzle \u00b6 Use the Nozzle Lock-Ring to install the Nozzle Make sure there is an undamaged O-Ring neslted in the Nozzle Lock-Ring orifice Make sure the Nozzle is not obviously clogged: Use a 60ml Syringe filled with MilliQ water and fitted with an Acrodisc 0.2um Syringe Filter Place the Nozzle so that the wider end is around the outflow of the Acrodisc filter, and press lightly on the Syringe. Water should be ejected from the Nozzle Tip in a straight stream. If you cannot get a clear stream, try multiple light pressses on the Syringe plunger If the Stream comes out at an angle, attempt this flushing by reversing the Nozzle so that the tip is fitted into the outflow of the Acrodisc Filter. BE CAREFULE If Flushing in reverse does not work, Sonicate the Nozzle. Place the nozzle in a plastic lid (see example) to protect it from the bare metal of the sonicator Sonicate in MilliQ water for 15 minutes Attempt Syringe purges again If still clogged, soak Nozzle in 70% Ethanol for 30 minutes and repeat flushes and sonication Place Nozzle inside Nozzle Lock-Ring and install on Nozzle Assembly It may help to turn on PURGE on the Regulator Tower to open the Waste Valve and create a vacuum on the Nozzle Assembly to hold the Nozzle steady. DO NOT RELY ON THIS VACUUM TO HOLD THE NOZZLE ON ITS OWN After Nozzle has been installed, turn off PURGE if used. Hook-Up Sheath Fluid Canister to InFlux \u00b6 Connect InFlux Sheath Line (clear) Install a new 0.2um Sterivex In-line Filter Connect InFlux Air Line (blue) Loosen Pressure Valve Optional Filter Sheath Fluid Disconnect 0.2um Sterivex In-line Filter at the outlet leading to the InFlux Get a clean Sheath Fluid Cannister Connect Sheath Fluid Cannister Fluid Intake Adapter filter Sheath Fluid from the original cannister to the clean one using the 0.2um Sterivex Loosen Pressure Valve on New Sheath Cannister Purge and Fill Sheath Line Working on the Air Regulator Knobs on the Right Side of the Instrument Use the Sheath Knob on the Right side of the instrument to set the Sheath PSI to 10.0 Slowly tighten the Pressure Release valve on the Sheath Fluid Cannister You may need to wiggle the lid of the cannister to get the O-Ring to settle and seal the container This is done to gently fill the 0.2um Sterivex In-line Filter so that it doesn't have air bubbles Optional (If Filtering Sheath Fluid): Filter the Sheath Fluid from the Original Sheath Cannister to the New Sheath Cannister Transfer the Sheath Line and Sterivex to the New Sheath Cannister. Disconnect the Fluid Intake Adapter from the Sterivex and the New Sheath Cannister Connect the Sheath Fluid Outlet to the New Sheath Cannister Connect the 0.2um Sterivex to the Sheath Line leading to the instrument Once Sheath Cannister is pressurized, increase the Sheath PSI to 15.0 using the Knob on the Regulator Tower Press the RINSE button on the Regulator Tower to open the Sheath and Waste valves. Stop the Rinse when Sheath Fluid reaches the Y-Connector affixed to the upper right corner of the Nozzle Assembly Purge Nozzle and Nozzle Assembly \u00b6 Ensure that Nozzle has been installed (see section Install Nozzle ) Place the Drain below the Nozzle Assembly, the peg on the bottom of the Drain should fit into the hole leading to the Sort Chamber Place the glass Spoon on the Drain such that the Nozzle is inside the spoon Fill the Spoon with 0.2um filtered Sheath Fluid from the Syringe with the 0.2um Acrodisc Filter The Water level should be high enough to immerse the Nozzle Tip, but below the level where it would cover the Nozzle Lock-Ring in fluid Press PURGE to open the Waste Valve leading from the Sheath Fluid Y-Connector to the Waste Canister This will fill the Nozzle Assembly by drawing water from the Spoon Do not let the sheath water level in the Spoon drop below the Nozzle Tip Be sure that the OVERRIDE Button next to the Sample Cradle is not pressed. This Button forces the Sample Valve Open. Normally the Sample Valve only opens if RUN is pressed. Continue Purging until Sheath Fluid drawn into the Nozzle Tip and up through the Nozzle Assembly reaches the Y-Connector at the top of the Nozzle Assembly. You should see the air bubble flow out of the Y-Connector and into the Waste Line at the top of the Y-Connector. Briefly press the RINSE Button to open the Sheath Valve and Waste Valve to chase bubbles out of the Y-Connector Press the PURGE Button to open the Waste Valve and close the Sheath Valve Press the PULSE Button on the Regulator Tower to open and close the Sheath Valve several times in quick succession. Air Bubbles from the Nozzle should be loosened and begin to travel up through the Nozzle Assembly. Continue with PURGE until all bubbles are removed from the Nozzle Assembly. Press the RUN Button on the Regulator Tower to close the Waste Valve and open the Sheath Valve Remove Spoon and Drain from Instrument Use a twisted KimWipe to soak up any water stuck to the Nozzle Tip Press BACKFLUSH Button next to the Sample Cradle to open the Sample Valve. Sheath fluid should drip out of the Sample Tube After 30 sec, if you do not hear the Sheath Fluid being sucked into the drain below the Sample Cradle (which leads to one of the four pink lines on the Waste Connector), check to verify that the drain is not clogged. See the above if water begins to spill out because you ignored the previously given advice. Instrument Orientation \u00b6 Stage Directions \u00b6 The Right and Left sides of the instrument are based on the user facing the instrument from the front, viewing the Sort Chamber In XYZ Terms we will use for Alignment Movements X = Machine Left-Right, with X Increasing from RIGHT to LEFT. Y = Machine Front-Back, with Y Increasing as you approach the Front of the Instrument. Z = Machine Up-Down, with Z increasing as you approach the top of the Instrument. Stream and Optical Stages: \u00b6 Stream Stages \u00b6 Stream Tilt (Black Knobs) Stream Tilt X - Located immediately below the Sheath Line Y-Connector Stream Tilt Y - Located at Front of Nozzle Assemblt Stream Stage (Silver Knobs) Stream Stage X - Located at Bottom Right Side of Nozzle Assembly Stage Stream Stage Y - Located at Rear of Nozzle Assembly Stage FSC Stage \u00b6 FSC Stage (Silver Knobs) FSC Stage X - located on Right Side of FSC Stage FSC Stage Y - located on Front Side of FSC Stage FSC Stage Z - located on Top of FSC Stage Laser Stages (Silver and Color-Coded Knobs) on Top Left Side of Instrument \u00b6 488nm Laser 488 Stage Z - Located at Top of 488 Stage 488 Stage Sweep - Located at Front Side of 488 Stage 457nm Laser 457 Stage Z - Located at Top of 488 Stage 457 Stage Sweep - Located at Rear Side of 457 Stage 671nm Laser 671 Stage Z - Located at Top of 671 Stage 671 Stage Sweep - Located at Rear Side of 671 Stage","title":"influx"},{"location":"quickstart/#impractical-flow-cytometry","text":"","title":"Impractical Flow Cytometry"},{"location":"quickstart/#instrument-start-up","text":"","title":"Instrument Start-up"},{"location":"quickstart/#electronics","text":"","title":"Electronics"},{"location":"quickstart/#turn-on-influx","text":"Turn On Primary Power \"Power Strip 1\" Computer Table Turn On Instrument Power using Rocker Switch on Instrument Chassis Turn On Sort Chamber Illumination Light Turn On Power for the Vacuum Pump and Lasers using the Rocker Switches on the E 107 Unit. The Switches are numbered: 1 VAC - Vacuum Pump 2 488 - 488nm Coherent Laser 3 457 - 457nm Melles Griot Laser 4 671 - 671nm Opto Engine Laser Turn On Tektronix TDS 2014C Oscilliscope using the Power Switch on the Top Left Corner","title":"Turn On InFlux"},{"location":"quickstart/#check-the-cameras-using-the-marshall-monitor","text":"Toggle Between the VIDEO 1 and VIDEO 2 Sources for each Monitor using the Silver Switch at the Upper Right Corner of the Monitor Left Monitor \"PIN HOLE\" VIDEO 1 - Pinhole Camera of the Stream and the Laser Pinholes VIDEO 2 - None Center Monitor \"DROP\" VIDEO 1 - FSC Pinhole Camera (located on the FSC optical path) VIDEO 2 - Drop Camera (For finding Break-off Point for Flow Sorting) The Drop Camera is moved with the Drop Camera Z Knob located near the Sheath Valve on the top of the Instrument If the Drop Camera seems dark, be sure that the Drop Camera Mirror is installed outside the Laser Chamber with the Flat Side facing towards the corner between the FSC and Side/Fluorescence lenses. There is an opening in the wall of the Laser Chamber, allowing light from the Drop Camera Mirror to illuminate the stream viewed by the Drop Camera. Right Monitor \"STREAM\" VIDEO 1 - Stream Camera (Shows Sort Chamber for Sorting and Coarse Alignment) If this Camera is dark, make sure to activate the yellow ILLUM Button located on the Front Right side of the Instrument Chassis","title":"Check the Cameras using the Marshall Monitor"},{"location":"quickstart/#turn-on-lasers-using-the-psu-on-the-instrument-chassis","text":"Turn On 488nm Coherent Laser Power Supply Unit with the following sequence: Power Switch Turn Key Use the dial to set the 488nm Laser Power Percent to 108 (as seen in the digital read-out) Turn On 457nm Melles Griot Laser Power Supply Unit with the following sequence: Power Switch Laser Power Button Turn Key to Enable (Optional) Turn On 671nm Opto Engine Laser Power Supply Unit Power Switch Use the dial to set Laser Power to 6.73?","title":"Turn On Lasers using the PSU on the Instrument Chassis"},{"location":"quickstart/#turn-on-computers","text":"Start Dell PC (CytoServer) Use the login info recorded locally. Wait for this PC to boot up and login to Desktop before proceeding Start HP PC (Sortware and Sensirion) Start SortWare Connect to Cytometer Start Sensirion Software Begin Logging","title":"Turn On Computers"},{"location":"quickstart/#fluidics","text":"","title":"Fluidics"},{"location":"quickstart/#fill-sheath-fluid-canister-previous-day","text":"Measure with Graduated Cylinder For BioSure: Mixture is 1/8 BioSure Concentrate and 7/8 MilliQ Water For NaCl: Dissolve Xg NaCl in Y MillQ Water and let sit overnight Fill a 60ml Syringe with Sheath Fluid for Purging the instrument and filling sort tubes. Label Syringe. Attach a 0.2um Acrodisc Synring Filter to the synringe","title":"Fill Sheath Fluid Canister - Previous Day"},{"location":"quickstart/#hook-up-waste-canister","text":"Connect InFlux Waste Lines Intake Connect Vacuum Pump Turn on Vacuum Pump (Pump is powered by InFlux Instrument Power)","title":"Hook-Up Waste Canister"},{"location":"quickstart/#install-nozzle","text":"Use the Nozzle Lock-Ring to install the Nozzle Make sure there is an undamaged O-Ring neslted in the Nozzle Lock-Ring orifice Make sure the Nozzle is not obviously clogged: Use a 60ml Syringe filled with MilliQ water and fitted with an Acrodisc 0.2um Syringe Filter Place the Nozzle so that the wider end is around the outflow of the Acrodisc filter, and press lightly on the Syringe. Water should be ejected from the Nozzle Tip in a straight stream. If you cannot get a clear stream, try multiple light pressses on the Syringe plunger If the Stream comes out at an angle, attempt this flushing by reversing the Nozzle so that the tip is fitted into the outflow of the Acrodisc Filter. BE CAREFULE If Flushing in reverse does not work, Sonicate the Nozzle. Place the nozzle in a plastic lid (see example) to protect it from the bare metal of the sonicator Sonicate in MilliQ water for 15 minutes Attempt Syringe purges again If still clogged, soak Nozzle in 70% Ethanol for 30 minutes and repeat flushes and sonication Place Nozzle inside Nozzle Lock-Ring and install on Nozzle Assembly It may help to turn on PURGE on the Regulator Tower to open the Waste Valve and create a vacuum on the Nozzle Assembly to hold the Nozzle steady. DO NOT RELY ON THIS VACUUM TO HOLD THE NOZZLE ON ITS OWN After Nozzle has been installed, turn off PURGE if used.","title":"Install Nozzle"},{"location":"quickstart/#hook-up-sheath-fluid-canister-to-influx","text":"Connect InFlux Sheath Line (clear) Install a new 0.2um Sterivex In-line Filter Connect InFlux Air Line (blue) Loosen Pressure Valve Optional Filter Sheath Fluid Disconnect 0.2um Sterivex In-line Filter at the outlet leading to the InFlux Get a clean Sheath Fluid Cannister Connect Sheath Fluid Cannister Fluid Intake Adapter filter Sheath Fluid from the original cannister to the clean one using the 0.2um Sterivex Loosen Pressure Valve on New Sheath Cannister Purge and Fill Sheath Line Working on the Air Regulator Knobs on the Right Side of the Instrument Use the Sheath Knob on the Right side of the instrument to set the Sheath PSI to 10.0 Slowly tighten the Pressure Release valve on the Sheath Fluid Cannister You may need to wiggle the lid of the cannister to get the O-Ring to settle and seal the container This is done to gently fill the 0.2um Sterivex In-line Filter so that it doesn't have air bubbles Optional (If Filtering Sheath Fluid): Filter the Sheath Fluid from the Original Sheath Cannister to the New Sheath Cannister Transfer the Sheath Line and Sterivex to the New Sheath Cannister. Disconnect the Fluid Intake Adapter from the Sterivex and the New Sheath Cannister Connect the Sheath Fluid Outlet to the New Sheath Cannister Connect the 0.2um Sterivex to the Sheath Line leading to the instrument Once Sheath Cannister is pressurized, increase the Sheath PSI to 15.0 using the Knob on the Regulator Tower Press the RINSE button on the Regulator Tower to open the Sheath and Waste valves. Stop the Rinse when Sheath Fluid reaches the Y-Connector affixed to the upper right corner of the Nozzle Assembly","title":"Hook-Up Sheath Fluid Canister to InFlux"},{"location":"quickstart/#purge-nozzle-and-nozzle-assembly","text":"Ensure that Nozzle has been installed (see section Install Nozzle ) Place the Drain below the Nozzle Assembly, the peg on the bottom of the Drain should fit into the hole leading to the Sort Chamber Place the glass Spoon on the Drain such that the Nozzle is inside the spoon Fill the Spoon with 0.2um filtered Sheath Fluid from the Syringe with the 0.2um Acrodisc Filter The Water level should be high enough to immerse the Nozzle Tip, but below the level where it would cover the Nozzle Lock-Ring in fluid Press PURGE to open the Waste Valve leading from the Sheath Fluid Y-Connector to the Waste Canister This will fill the Nozzle Assembly by drawing water from the Spoon Do not let the sheath water level in the Spoon drop below the Nozzle Tip Be sure that the OVERRIDE Button next to the Sample Cradle is not pressed. This Button forces the Sample Valve Open. Normally the Sample Valve only opens if RUN is pressed. Continue Purging until Sheath Fluid drawn into the Nozzle Tip and up through the Nozzle Assembly reaches the Y-Connector at the top of the Nozzle Assembly. You should see the air bubble flow out of the Y-Connector and into the Waste Line at the top of the Y-Connector. Briefly press the RINSE Button to open the Sheath Valve and Waste Valve to chase bubbles out of the Y-Connector Press the PURGE Button to open the Waste Valve and close the Sheath Valve Press the PULSE Button on the Regulator Tower to open and close the Sheath Valve several times in quick succession. Air Bubbles from the Nozzle should be loosened and begin to travel up through the Nozzle Assembly. Continue with PURGE until all bubbles are removed from the Nozzle Assembly. Press the RUN Button on the Regulator Tower to close the Waste Valve and open the Sheath Valve Remove Spoon and Drain from Instrument Use a twisted KimWipe to soak up any water stuck to the Nozzle Tip Press BACKFLUSH Button next to the Sample Cradle to open the Sample Valve. Sheath fluid should drip out of the Sample Tube After 30 sec, if you do not hear the Sheath Fluid being sucked into the drain below the Sample Cradle (which leads to one of the four pink lines on the Waste Connector), check to verify that the drain is not clogged. See the above if water begins to spill out because you ignored the previously given advice.","title":"Purge Nozzle and Nozzle Assembly"},{"location":"quickstart/#instrument-orientation","text":"","title":"Instrument Orientation"},{"location":"quickstart/#stage-directions","text":"The Right and Left sides of the instrument are based on the user facing the instrument from the front, viewing the Sort Chamber In XYZ Terms we will use for Alignment Movements X = Machine Left-Right, with X Increasing from RIGHT to LEFT. Y = Machine Front-Back, with Y Increasing as you approach the Front of the Instrument. Z = Machine Up-Down, with Z increasing as you approach the top of the Instrument.","title":"Stage Directions"},{"location":"quickstart/#stream-and-optical-stages","text":"","title":"Stream and Optical Stages:"},{"location":"quickstart/#stream-stages","text":"Stream Tilt (Black Knobs) Stream Tilt X - Located immediately below the Sheath Line Y-Connector Stream Tilt Y - Located at Front of Nozzle Assemblt Stream Stage (Silver Knobs) Stream Stage X - Located at Bottom Right Side of Nozzle Assembly Stage Stream Stage Y - Located at Rear of Nozzle Assembly Stage","title":"Stream Stages"},{"location":"quickstart/#fsc-stage","text":"FSC Stage (Silver Knobs) FSC Stage X - located on Right Side of FSC Stage FSC Stage Y - located on Front Side of FSC Stage FSC Stage Z - located on Top of FSC Stage","title":"FSC Stage"},{"location":"quickstart/#laser-stages-silver-and-color-coded-knobs-on-top-left-side-of-instrument","text":"488nm Laser 488 Stage Z - Located at Top of 488 Stage 488 Stage Sweep - Located at Front Side of 488 Stage 457nm Laser 457 Stage Z - Located at Top of 488 Stage 457 Stage Sweep - Located at Rear Side of 457 Stage 671nm Laser 671 Stage Z - Located at Top of 671 Stage 671 Stage Sweep - Located at Rear Side of 671 Stage","title":"Laser Stages (Silver and Color-Coded Knobs) on Top Left Side of Instrument"},{"location":"vsnotes/","text":"Using VS Code for general development \u00b6 Editor Settings in settings.json \u00b6 Notes: \u00b6 Most CodeBlock examples include a trailing , comma to make it easier to copy-paste these examples into the settings.json file. The Basic Structure of the settings.json file is: json { \"config.setting.key.property\": } Show more document tabs in the workbench.editor \u00b6 // Increase number of tabs visible on an editor window \"workbench.editor.tabSizing\": \"shrink\", Set Indentation Defaults \u00b6 // ------------ Indentation // Detect Indentation Based on Filetype \"editor.detectIndentation\": false, // Markdown Extension \"Markdown All in One\" List Formatting \"markdown.extension.list.indentationSize\": \"inherit\", // Alternate: \"adaptive\" \"markdown.extension.list.toggle.candidate-markers\": [ \"-\", \"*\", \"+\", \"1.\", \"01.\", // Added \"1)\", \"01)\" // Added ], Converting Atom cofee script to VS Code JavaScript \u00b6 # ------------------ CURSOR TO NEXT CHUNK ---------------------- atom.commands.add 'atom-text-editor', 'cursor-to-next-chunk': -> # ----------------- Get cursor where it starts ------------------- cursorPointStart = atom.workspace.getActiveTextEditor()?.getCursorBufferPosition() # ----------------- Move cursor to end of line ------------------- atom.workspace.getActiveTextEditor()?.getLastCursor().moveToEndOfLine() # ----------------- Get cursor at end of line ------------------- cursorPoint = atom.workspace.getActiveTextEditor()?.getCursorBufferPosition() rowStartBlank = false # init if cursorPointStart.column is 0 and cursorPoint.column is 0 rowStartBlank = true # ----------------- Error Checking ------------------- startLineComment = atom.workspace.getActiveTextEditor()?.isBufferRowCommented(cursorPoint.row) # ----------------- Init i and begin loop ------------------- i = 1 loop i = i + 1 # ----------------- Move cursor down one line ------------------- atom.workspace.getActiveTextEditor()?.getLastCursor().moveToEndOfLine() atom.workspace.getActiveTextEditor()?.getLastCursor().moveDown(1) atom.workspace.getActiveTextEditor()?.getLastCursor().moveToBeginningOfLine() # ----------------- Get cursor status at start of line ------------------- cursorPointStart = atom.workspace.getActiveTextEditor()?.getCursorBufferPosition() # ----------------- Move cursor to end of line ------------------- atom.workspace.getActiveTextEditor()?.getLastCursor().moveToEndOfLine() # ----------------- Get cursor status at end of line ------------------- cursorPoint = atom.workspace.getActiveTextEditor()?.getCursorBufferPosition() # ----------------- Check for row being a comment ------------------- thisLineComment = atom.workspace.getActiveTextEditor()?.isBufferRowCommented(cursorPoint.row) # ----------------- If starting row was not empty ------------------- if rowStartBlank is false # ----------------- If start at comment, and current line is not comment ------------------- if startLineComment is true and thisLineComment is false atom.workspace.getActiveTextEditor()?.getLastCursor().moveToEndOfLine() # Move to start of line atom.workspace.getActiveTextEditor()?.getLastCursor().moveToBeginningOfLine() break # ----------------- If start at NOT comment, and current line IS comment ------------------- if startLineComment is false and thisLineComment is true atom.workspace.getActiveTextEditor()?.getLastCursor().moveToEndOfLine() # Move to start of line atom.workspace.getActiveTextEditor()?.getLastCursor().moveToBeginningOfLine() break # ----------------- If start NOT empty and current IS empty ------------------- if cursorPointStart.column == 0 and cursorPoint.column == 0 atom.workspace.getActiveTextEditor()?.getLastCursor().moveToEndOfLine() # Move to start of line atom.workspace.getActiveTextEditor()?.getLastCursor().moveToBeginningOfLine() break # ----------------- If Starting Row was blank ------------------- else # ----------------- If this row also blank, do nothing ------------------- if cursorPointStart.column == 0 and cursorPoint.column == 0 # ----------------- If this row not blank, stop ------------------- else atom.workspace.getActiveTextEditor()?.getLastCursor().moveToEndOfLine() # Move to start of line atom.workspace.getActiveTextEditor()?.getLastCursor().moveToBeginningOfLine() break # Move to start of line atom.workspace.getActiveTextEditor()?.getLastCursor().moveToBeginningOfLine() # ----------------- To Prevent run-away loops ------------------- if i == 30 atom.workspace.getActiveTextEditor()?.getLastCursor().moveToEndOfLine() break # Move to start of line atom.workspace.getActiveTextEditor()?.getLastCursor().moveToBeginningOfLine() It might be easier to do this from scratch...","title":"vsnotes"},{"location":"vsnotes/#using-vs-code-for-general-development","text":"","title":"Using VS Code for general development"},{"location":"vsnotes/#editor-settings-in-settingsjson","text":"","title":"Editor Settings in settings.json"},{"location":"vsnotes/#notes","text":"Most CodeBlock examples include a trailing , comma to make it easier to copy-paste these examples into the settings.json file. The Basic Structure of the settings.json file is: json { \"config.setting.key.property\": }","title":"Notes:"},{"location":"vsnotes/#show-more-document-tabs-in-the-workbencheditor","text":"// Increase number of tabs visible on an editor window \"workbench.editor.tabSizing\": \"shrink\",","title":"Show more document tabs in the workbench.editor"},{"location":"vsnotes/#set-indentation-defaults","text":"// ------------ Indentation // Detect Indentation Based on Filetype \"editor.detectIndentation\": false, // Markdown Extension \"Markdown All in One\" List Formatting \"markdown.extension.list.indentationSize\": \"inherit\", // Alternate: \"adaptive\" \"markdown.extension.list.toggle.candidate-markers\": [ \"-\", \"*\", \"+\", \"1.\", \"01.\", // Added \"1)\", \"01)\" // Added ],","title":"Set Indentation Defaults"},{"location":"vsnotes/#converting-atom-cofee-script-to-vs-code-javascript","text":"# ------------------ CURSOR TO NEXT CHUNK ---------------------- atom.commands.add 'atom-text-editor', 'cursor-to-next-chunk': -> # ----------------- Get cursor where it starts ------------------- cursorPointStart = atom.workspace.getActiveTextEditor()?.getCursorBufferPosition() # ----------------- Move cursor to end of line ------------------- atom.workspace.getActiveTextEditor()?.getLastCursor().moveToEndOfLine() # ----------------- Get cursor at end of line ------------------- cursorPoint = atom.workspace.getActiveTextEditor()?.getCursorBufferPosition() rowStartBlank = false # init if cursorPointStart.column is 0 and cursorPoint.column is 0 rowStartBlank = true # ----------------- Error Checking ------------------- startLineComment = atom.workspace.getActiveTextEditor()?.isBufferRowCommented(cursorPoint.row) # ----------------- Init i and begin loop ------------------- i = 1 loop i = i + 1 # ----------------- Move cursor down one line ------------------- atom.workspace.getActiveTextEditor()?.getLastCursor().moveToEndOfLine() atom.workspace.getActiveTextEditor()?.getLastCursor().moveDown(1) atom.workspace.getActiveTextEditor()?.getLastCursor().moveToBeginningOfLine() # ----------------- Get cursor status at start of line ------------------- cursorPointStart = atom.workspace.getActiveTextEditor()?.getCursorBufferPosition() # ----------------- Move cursor to end of line ------------------- atom.workspace.getActiveTextEditor()?.getLastCursor().moveToEndOfLine() # ----------------- Get cursor status at end of line ------------------- cursorPoint = atom.workspace.getActiveTextEditor()?.getCursorBufferPosition() # ----------------- Check for row being a comment ------------------- thisLineComment = atom.workspace.getActiveTextEditor()?.isBufferRowCommented(cursorPoint.row) # ----------------- If starting row was not empty ------------------- if rowStartBlank is false # ----------------- If start at comment, and current line is not comment ------------------- if startLineComment is true and thisLineComment is false atom.workspace.getActiveTextEditor()?.getLastCursor().moveToEndOfLine() # Move to start of line atom.workspace.getActiveTextEditor()?.getLastCursor().moveToBeginningOfLine() break # ----------------- If start at NOT comment, and current line IS comment ------------------- if startLineComment is false and thisLineComment is true atom.workspace.getActiveTextEditor()?.getLastCursor().moveToEndOfLine() # Move to start of line atom.workspace.getActiveTextEditor()?.getLastCursor().moveToBeginningOfLine() break # ----------------- If start NOT empty and current IS empty ------------------- if cursorPointStart.column == 0 and cursorPoint.column == 0 atom.workspace.getActiveTextEditor()?.getLastCursor().moveToEndOfLine() # Move to start of line atom.workspace.getActiveTextEditor()?.getLastCursor().moveToBeginningOfLine() break # ----------------- If Starting Row was blank ------------------- else # ----------------- If this row also blank, do nothing ------------------- if cursorPointStart.column == 0 and cursorPoint.column == 0 # ----------------- If this row not blank, stop ------------------- else atom.workspace.getActiveTextEditor()?.getLastCursor().moveToEndOfLine() # Move to start of line atom.workspace.getActiveTextEditor()?.getLastCursor().moveToBeginningOfLine() break # Move to start of line atom.workspace.getActiveTextEditor()?.getLastCursor().moveToBeginningOfLine() # ----------------- To Prevent run-away loops ------------------- if i == 30 atom.workspace.getActiveTextEditor()?.getLastCursor().moveToEndOfLine() break # Move to start of line atom.workspace.getActiveTextEditor()?.getLastCursor().moveToBeginningOfLine() It might be easier to do this from scratch...","title":"Converting Atom cofee script to VS Code JavaScript"},{"location":"workflow/","text":"This is the workflow for documentation using MkDocs and website hosting using GitHub Pages. Verify Branch and remote repository alias \u00b6 Check your branch and remote repository aliases cd ~/scidev git status git remote --verbose You should see the alias scimain : dhcp-168-105-223-225:scidev eshim$ git remote --verbose scimain https://github.com/eshimab/eshimab.github.io (fetch) scimain https://github.com/eshimab/eshimab.github.io (push) Resuming Work on Local Machine \u00b6 Pull from git \u00b6 git pull scimain main Updating Files \u00b6 Build site with MkDocs \u00b6 Activate the python3 venv to run mkdocs \u00b6 After updating the markdown documents in scidev/notesite/docs # Move to the python3 virtual env bin directory to activate the venv cd ~/scidev source envsdir/mdocs/bin/activate # activate the python3 venv using command `source` cd ~/scidev/notesite # move to the mkdocs root directory mkdocs build # build the site with MkDocs # Exit the virtual machine deactivate Sync Local Files with rsync \u00b6 Sync Files from ~/scidev/notesite/site created by MkDocs in the python3 venv to ~/scidev/notesite/docs which is required for hosting on GitHub Pages ~/scidev/notesite/site is the HTML Site Created by MkDocs in the python3 venv After Syncing from ~/scidev/notesite/site , delete that directory because it is redundant. # Move the mkdocs site to the scidev/docs so that GitHub Pages can find it rsync --archive --progress --recursive --verbose --delete-after ~/scidev/notesite/site/* ~/scidev/docs # Delete the generated site directory created by `mkdocs build` rm -vR ~/scidev/notesite/site # Back-Up Examples of local Docs rsync --archive --progress --recursive --verbose ~/Library/Application\\ Support/Code/User/settings.json ~/scidev/notesite/examples/vscode/settings.json Use Git to Add/Commit To Local Branch and Push to Remote Branch \u00b6 # Set Commit Message Variable commit_message=\"Commit from Local Machine. Updates to workflow.md\" # Add / Commit / Push got Git cd ~/scidev # Move to root dir of the local Git branch git status git remote --verbose # View the Remote Repository URL Aliases # # Add Changes ie Stage Commits on local machine git add docs # this is the HTML site generated by mkdocs git add notesite # Because we updated the md files here git add mkupdate.sh # Add scidev/mkupdate.sh git add scratch.md # Add Scratch File scidev/scratch.md git add corefile.md # Add Scratch File scidev/scratch.md git status # Create a Commit on local machine branch git commit -m \"$commit_message\" # Push Changes from the Local Branch `main` and merge them with the Remote Repository Alias `scimain` git push scimain main Push Error? \u00b6 You will get a git push error if the Local Branch is behind the Remote GitHub Repository Commit Works dhcp-168-105-223-225:scidev eshim$ git commit -m \"$commit_message\" [main 8ddabfd] Updates to quickstart.md 5 files changed, 512 insertions(+), 74 deletions(-) create mode 100644 notesite/examples/vscode/settings.json create mode 100644 scratch.md I try to use git push to push commits from my local branch main to the Github Repository scimain/main Push Command Error \u00b6 I use Command git push scimain main I get an error because scimain is ahead of my local main dhcp-168-105-223-225:scidev eshim$ git push scimain main To https://github.com/eshimab/eshimab.github.io ! [rejected] main -> main (non-fast-forward) error: failed to push some refs to 'https://github.com/eshimab/eshimab.github.io' hint: Updates were rejected because the tip of your current branch is behind hint: its remote counterpart. Integrate the remote changes (e.g. hint: 'git pull ...') before pushing again. hint: See the 'Note about fast-forwards' in 'git push --help' for details. dhcp-168-105-223-225:scidev eshim$ Pull Command Error \u00b6 I try to use git pull scimain main To Update my Local Branch main Returns Error: E325: ATTENTION Found a swap file by the name \"~/scidev/.git/.MERGE_MSG.swp\" owned by: eshim dated: Mon Jul 10 16:42:19 2023 file name: ~eshim/scidev/.git/MERGE_MSG modified: YES user name: eshim host name: dhcp-168-105-223-225.wireless.manoa.haw process ID: 23271 While opening file \"/Users/eshim/scidev/.git/MERGE_MSG\" dated: Tue Jul 11 15:11:08 2023 NEWER than swap file! (1) Another program may be editing the same file. If this is the case, be careful not to end up with two different instances of the same file when making changes. Quit, or continue with caution. (2) An edit session for this file crashed. If this is the case, use \":recover\" or \"vim -r /Users/eshim/scidev/.git/MERGE_MSG\" to recover the changes (see \":help recovery\"). If you did this already, delete the swap file \"/Users/eshim/scidev/.git/.MERGE_MSG.swp\" to avoid this message. Swap file \"~/scidev/.git/.MERGE_MSG.swp\" already exists! [O]pen Read-Only, (E)dit anyway, (R)ecover, (D)elete it, (Q)uit, (A)bort: Solution Delete Old Vim Temporary Files .MERGE_MSG.swo and .MERGE_MSG.swp \u00b6 The file scidev/.git/.MERGE_MSG.swo appears to be a swap file created by the Vim text editor. Vim uses swap files with the .swo extension to store temporary changes made during editing sessions. When you see this file in your Git repository, it usually indicates that you had a Vim session open and either closed it abruptly or encountered an issue while editing the .MERGE_MSG file. The swap file is created to allow recovery of unsaved changes in case of unexpected interruptions. Since this is a temporary file specific to Vim, it is safe to delete it. You can use the following command to remove the swap file: bash rm ~/scidev/.git/.MERGE_MSG.swo rm ~/scidev/.git/.MERGE_MSG.swp Attempt Pull Again: Error \u00b6 I try the git pull scimain main Command and Get Error: dhcp-168-105-223-225:scidev eshim$ git pull scimain main error: You have not concluded your merge (MERGE_HEAD exists). hint: Please, commit your changes before merging. fatal: Exiting because of unfinished merge. I use the code from Section Add/Commit/Push Files to Git Repository to Commit Changes to my Local Branch. Attempt Push: Success \u00b6 Push Succeeded! git push scimain main Attempt Pull: \u00b6 Pull Attempt Succeeds! Local Branch main matches Remote Branch scidev/main dhcp-168-105-223-225:scidev eshim$ git pull scimain main From https://github.com/eshimab/eshimab.github.io * branch main -> FETCH_HEAD Already up to date. Renaming and Syncing a File \u00b6 If we want to change the name of the file ~/scidev/notesite/docs/influx.md to ~/scidev/notesite/docs/influx.md # Perform Action # bash command here? # Set Commit Message commit_message=\"Updates to workflow.md\" # Compile MkDocs Site with python venv cd ~/scidev source envsdir/mdocs/bin/activate # activate the python3 venv using command `source` cd ~/scidev/notesite # move to the mkdocs root directory mkdocs build # build the site with MkDocs rsync --archive --progress --recursive --verbose --delete-after ~/scidev/notesite/site/* ~/scidev/docs # Syhc rm -vR ~/scidev/notesite/site # Delete Original Compiled Site deactivate # Exit venc # Commit to Local GitHub Branch (should be main) cd ~/scidev # Move to root dir of the local Git branch git add notesite # MkDocs Working Directory with .md Files: scidev/notesite git add docs # HTML site generated by mkdocs: scidev/notesite/docs git add mkupdate.sh # Start-up shell script for short-cuts: scidev/mkupdate.sh git status git commit -m \"$commit_message\" # Send Commit to Local GitHub Branch (should be main) # Push Local GitHub Branch `main` to Remote GitHub Repository using Remote Repository URL alias `scimain` git push scimain main # Remember to initiate a Pull Request on your other devices before editting files!","title":"workflow"},{"location":"workflow/#verify-branch-and-remote-repository-alias","text":"Check your branch and remote repository aliases cd ~/scidev git status git remote --verbose You should see the alias scimain : dhcp-168-105-223-225:scidev eshim$ git remote --verbose scimain https://github.com/eshimab/eshimab.github.io (fetch) scimain https://github.com/eshimab/eshimab.github.io (push)","title":"Verify Branch and remote repository alias"},{"location":"workflow/#resuming-work-on-local-machine","text":"","title":"Resuming Work on Local Machine"},{"location":"workflow/#pull-from-git","text":"git pull scimain main","title":"Pull from git"},{"location":"workflow/#updating-files","text":"","title":"Updating Files"},{"location":"workflow/#build-site-with-mkdocs","text":"","title":"Build site with MkDocs"},{"location":"workflow/#activate-the-python3-venv-to-run-mkdocs","text":"After updating the markdown documents in scidev/notesite/docs # Move to the python3 virtual env bin directory to activate the venv cd ~/scidev source envsdir/mdocs/bin/activate # activate the python3 venv using command `source` cd ~/scidev/notesite # move to the mkdocs root directory mkdocs build # build the site with MkDocs # Exit the virtual machine deactivate","title":"Activate the python3 venv to run mkdocs"},{"location":"workflow/#sync-local-files-with-rsync","text":"Sync Files from ~/scidev/notesite/site created by MkDocs in the python3 venv to ~/scidev/notesite/docs which is required for hosting on GitHub Pages ~/scidev/notesite/site is the HTML Site Created by MkDocs in the python3 venv After Syncing from ~/scidev/notesite/site , delete that directory because it is redundant. # Move the mkdocs site to the scidev/docs so that GitHub Pages can find it rsync --archive --progress --recursive --verbose --delete-after ~/scidev/notesite/site/* ~/scidev/docs # Delete the generated site directory created by `mkdocs build` rm -vR ~/scidev/notesite/site # Back-Up Examples of local Docs rsync --archive --progress --recursive --verbose ~/Library/Application\\ Support/Code/User/settings.json ~/scidev/notesite/examples/vscode/settings.json","title":"Sync Local Files with rsync"},{"location":"workflow/#use-git-to-addcommit-to-local-branch-and-push-to-remote-branch","text":"# Set Commit Message Variable commit_message=\"Commit from Local Machine. Updates to workflow.md\" # Add / Commit / Push got Git cd ~/scidev # Move to root dir of the local Git branch git status git remote --verbose # View the Remote Repository URL Aliases # # Add Changes ie Stage Commits on local machine git add docs # this is the HTML site generated by mkdocs git add notesite # Because we updated the md files here git add mkupdate.sh # Add scidev/mkupdate.sh git add scratch.md # Add Scratch File scidev/scratch.md git add corefile.md # Add Scratch File scidev/scratch.md git status # Create a Commit on local machine branch git commit -m \"$commit_message\" # Push Changes from the Local Branch `main` and merge them with the Remote Repository Alias `scimain` git push scimain main","title":"Use Git to Add/Commit To Local Branch and Push to Remote Branch"},{"location":"workflow/#push-error","text":"You will get a git push error if the Local Branch is behind the Remote GitHub Repository Commit Works dhcp-168-105-223-225:scidev eshim$ git commit -m \"$commit_message\" [main 8ddabfd] Updates to quickstart.md 5 files changed, 512 insertions(+), 74 deletions(-) create mode 100644 notesite/examples/vscode/settings.json create mode 100644 scratch.md I try to use git push to push commits from my local branch main to the Github Repository scimain/main","title":"Push Error?"},{"location":"workflow/#push-command-error","text":"I use Command git push scimain main I get an error because scimain is ahead of my local main dhcp-168-105-223-225:scidev eshim$ git push scimain main To https://github.com/eshimab/eshimab.github.io ! [rejected] main -> main (non-fast-forward) error: failed to push some refs to 'https://github.com/eshimab/eshimab.github.io' hint: Updates were rejected because the tip of your current branch is behind hint: its remote counterpart. Integrate the remote changes (e.g. hint: 'git pull ...') before pushing again. hint: See the 'Note about fast-forwards' in 'git push --help' for details. dhcp-168-105-223-225:scidev eshim$","title":"Push Command Error"},{"location":"workflow/#pull-command-error","text":"I try to use git pull scimain main To Update my Local Branch main Returns Error: E325: ATTENTION Found a swap file by the name \"~/scidev/.git/.MERGE_MSG.swp\" owned by: eshim dated: Mon Jul 10 16:42:19 2023 file name: ~eshim/scidev/.git/MERGE_MSG modified: YES user name: eshim host name: dhcp-168-105-223-225.wireless.manoa.haw process ID: 23271 While opening file \"/Users/eshim/scidev/.git/MERGE_MSG\" dated: Tue Jul 11 15:11:08 2023 NEWER than swap file! (1) Another program may be editing the same file. If this is the case, be careful not to end up with two different instances of the same file when making changes. Quit, or continue with caution. (2) An edit session for this file crashed. If this is the case, use \":recover\" or \"vim -r /Users/eshim/scidev/.git/MERGE_MSG\" to recover the changes (see \":help recovery\"). If you did this already, delete the swap file \"/Users/eshim/scidev/.git/.MERGE_MSG.swp\" to avoid this message. Swap file \"~/scidev/.git/.MERGE_MSG.swp\" already exists! [O]pen Read-Only, (E)dit anyway, (R)ecover, (D)elete it, (Q)uit, (A)bort:","title":"Pull Command Error"},{"location":"workflow/#solution-delete-old-vim-temporary-files-merge_msgswo-and-merge_msgswp","text":"The file scidev/.git/.MERGE_MSG.swo appears to be a swap file created by the Vim text editor. Vim uses swap files with the .swo extension to store temporary changes made during editing sessions. When you see this file in your Git repository, it usually indicates that you had a Vim session open and either closed it abruptly or encountered an issue while editing the .MERGE_MSG file. The swap file is created to allow recovery of unsaved changes in case of unexpected interruptions. Since this is a temporary file specific to Vim, it is safe to delete it. You can use the following command to remove the swap file: bash rm ~/scidev/.git/.MERGE_MSG.swo rm ~/scidev/.git/.MERGE_MSG.swp","title":"Solution Delete Old Vim Temporary Files .MERGE_MSG.swo and .MERGE_MSG.swp"},{"location":"workflow/#attempt-pull-again-error","text":"I try the git pull scimain main Command and Get Error: dhcp-168-105-223-225:scidev eshim$ git pull scimain main error: You have not concluded your merge (MERGE_HEAD exists). hint: Please, commit your changes before merging. fatal: Exiting because of unfinished merge. I use the code from Section Add/Commit/Push Files to Git Repository to Commit Changes to my Local Branch.","title":"Attempt Pull Again: Error"},{"location":"workflow/#attempt-push-success","text":"Push Succeeded! git push scimain main","title":"Attempt Push: Success"},{"location":"workflow/#attempt-pull","text":"Pull Attempt Succeeds! Local Branch main matches Remote Branch scidev/main dhcp-168-105-223-225:scidev eshim$ git pull scimain main From https://github.com/eshimab/eshimab.github.io * branch main -> FETCH_HEAD Already up to date.","title":"Attempt Pull:"},{"location":"workflow/#renaming-and-syncing-a-file","text":"If we want to change the name of the file ~/scidev/notesite/docs/influx.md to ~/scidev/notesite/docs/influx.md # Perform Action # bash command here? # Set Commit Message commit_message=\"Updates to workflow.md\" # Compile MkDocs Site with python venv cd ~/scidev source envsdir/mdocs/bin/activate # activate the python3 venv using command `source` cd ~/scidev/notesite # move to the mkdocs root directory mkdocs build # build the site with MkDocs rsync --archive --progress --recursive --verbose --delete-after ~/scidev/notesite/site/* ~/scidev/docs # Syhc rm -vR ~/scidev/notesite/site # Delete Original Compiled Site deactivate # Exit venc # Commit to Local GitHub Branch (should be main) cd ~/scidev # Move to root dir of the local Git branch git add notesite # MkDocs Working Directory with .md Files: scidev/notesite git add docs # HTML site generated by mkdocs: scidev/notesite/docs git add mkupdate.sh # Start-up shell script for short-cuts: scidev/mkupdate.sh git status git commit -m \"$commit_message\" # Send Commit to Local GitHub Branch (should be main) # Push Local GitHub Branch `main` to Remote GitHub Repository using Remote Repository URL alias `scimain` git push scimain main # Remember to initiate a Pull Request on your other devices before editting files!","title":"Renaming and Syncing a File"}]}